<!DOCTYPE html>
<html lang="ru" data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D">
<head >
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
  <meta name="referrer" content="unsafe-url">
  <title>Как работать с процессами и потоками в Python / Хабр</title>
  <style>
    /* cyrillic-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSxf6TF0.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }

    /* cyrillic */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveQhf6TF0.woff2) format('woff2');
      unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
    }

    /* latin-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSBf6TF0.woff2) format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }

    /* latin */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveRhf6.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

    /* non-breaking hyphen */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/l/font?kit=KFOlCnqEu92Fr1MmEU9vBh0_IsHAlmrO6g&skey=ee881451c540fdec&v=v29) format('woff2');
      unicode-range: U+02011;
    }
  </style>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.0da14ebf.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.f2cd882e.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.04c2974e.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.4441b282.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" as="script">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.0da14ebf.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.04c2974e.css">
  <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.9143e7f16464deb606c9d6b057cbd3e9.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
  
  <script data-vue-meta="ssr" type="application/ld+json" data-vmid="ldjson-schema">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/simbirsoft\/articles\/701020\/"},"headline":"Как работать с процессами и потоками в Python","datePublished":"2022-11-23T10:50:57+03:00","dateModified":"2022-12-23T13:50:22+03:00","author":{"@type":"Person","name":"SSul"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости...","url":"https:\/\/habr.com\/ru\/companies\/simbirsoft\/articles\/701020\/#post-content-body","about":["c_simbirsoft","h_python","h_programming","h_parallel_programming","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/701020\/c5bdb05a7b1e08280e2ccf035ce3ab68\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/10d\/612\/12b\/10d61212b1a6e5341d4b66901be879c5.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/29d\/d70\/e74\/29dd70e74d9999d9cfc222bb23403877.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/1c9\/7c9\/bbe\/1c97c9bbe6dc9eee3e74c842bd921e9b.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/b2b\/44a\/7fc\/b2b44a7fc5d765d3440c38e5101b1979.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/f3e\/8dd\/685\/f3e8dd685990942bc4bed52863e5ba07.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/598\/9c4\/536\/5989c4536adbbd89b147300832920135.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/730\/a2d\/dad\/730a2ddad3fcddc5fc984280d86c0075.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/cb6\/011\/c84\/cb6011c843e061bde93b3ff7011e0b2e.png"]}</script>
  <style>.grecaptcha-badge{visibility: hidden;}</style>
  <meta name="habr-version" content="2.144.0">
  
  <meta data-vue-meta="ssr" property="fb:app_id" content="444736788986613"><meta data-vue-meta="ssr" property="fb:pages" content="472597926099084"><meta data-vue-meta="ssr" name="twitter:card" content="summary_large_image"><meta data-vue-meta="ssr" name="twitter:site" content="@habr_com"><meta data-vue-meta="ssr" property="og:site_name" content="Хабр" data-vmid="og:site_name"><meta data-vue-meta="ssr" property="og:title" content="Как работать с процессами и потоками в Python" data-vmid="og:title"><meta data-vue-meta="ssr" name="twitter:title" content="Как работать с процессами и потоками в Python" data-vmid="twitter:title"><meta data-vue-meta="ssr" name="aiturec:title" content="Как работать с процессами и потоками в Python" data-vmid="aiturec:title"><meta data-vue-meta="ssr" name="description" content="Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками..." data-vmid="description"><meta data-vue-meta="ssr" itemprop="description" content="Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками..." data-vmid="description:itemprop"><meta data-vue-meta="ssr" property="og:description" content="Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками..." data-vmid="og:description"><meta data-vue-meta="ssr" name="twitter:description" content="Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками..." data-vmid="twitter:description"><meta data-vue-meta="ssr" property="aiturec:description" content="Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками..." data-vmid="aiturec:description"><meta data-vue-meta="ssr" itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png" data-vmid="image:itemprop"><meta data-vue-meta="ssr" property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png" data-vmid="og:image"><meta data-vue-meta="ssr" property="og:image:width" content="1200" data-vmid="og:image:width"><meta data-vue-meta="ssr" property="og:image:height" content="630" data-vmid="og:image:height"><meta data-vue-meta="ssr" property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png" data-vmid="aiturec:image"><meta data-vue-meta="ssr" name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png" data-vmid="twitter:image"><meta data-vue-meta="ssr" property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png?format=vk" data-vmid="vk:image"><meta data-vue-meta="ssr" property="aiturec:item_id" content="701020" data-vmid="aiturec:item_id"><meta data-vue-meta="ssr" property="aiturec:datetime" content="2022-11-23T07:50:57.000Z" data-vmid="aiturec:datetime"><meta data-vue-meta="ssr" content="https://habr.com/ru/companies/simbirsoft/articles/701020/" property="og:url" data-vmid="og:url"><meta data-vue-meta="ssr" property="og:type" content="article" data-vmid="og:type"><meta data-vue-meta="ssr" property="og:locale" content="ru_RU" data-vmid="og:locale"><meta data-vue-meta="ssr" name="keywords" content="python, многопоточность, многопоточное программирование, асинхронность, асинхронное программирование">
  <link data-vue-meta="ssr" href="https://habr.com/ru/rss/publications/701020/?fl=ru" type="application/rss+xml" title="" rel="alternate" name="rss"><link data-vue-meta="ssr" href="https://habr.com/ru/companies/simbirsoft/articles/701020/" rel="canonical" data-vmid="canonical"><link data-vue-meta="ssr" rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/6fc/723/dad/6fc723dad2ebed67fd6b8d32b8830375.png" data-vmid="image:href"><link data-vue-meta="ssr" rel="amphtml" href="https://habr.com/ru/amp/publications/701020/">
  <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
  <meta name="msapplication-TileColor" content="#629FBC">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="16x16"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png"
  >
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="32x32"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="76x76"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="120x120"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="152x152"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="180x180"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="256x256"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png"
  >
  <link
    rel="mask-icon"
    color="#77a2b6"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg"
  >
  <link
    crossorigin="use-credentials"
    href="/manifest.webmanifest"
    rel="manifest"
  >
  <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
  <script>window.yaContextCb = window.yaContextCb || []</script>
  <script src="https://yandex.ru/ads/system/context.js" async></script>
</head>
<body>


<div id="app" data-server-rendered="true" data-async-called="true"><div class="tm-layout__wrapper"><!----> <div></div> <div class="tm-feature tm-feature"><!----></div> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><div class="tm-header__burger-nav"><button type="button" class="tm-header__button tm-header__button_burger"><svg height="16" width="16" class="tm-svg-img tm-header__icon tm-header__icon-burger"><title>Меню</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#header-burger"></use></svg></button></div> <span class="tm-header__logo-wrap"><a href="/ru/" class="tm-header__logo tm-header__logo_ru"><svg height="16" width="16" class="tm-svg-img tm-header__icon"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <!----> <div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search"><title>Поиск</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#search"></use></svg></a> <!----> <!----> <!----> <div class="tm-header-user-menu__item"><button data-test-id="menu-toggle-guest" class="tm-header-user-menu__toggle"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_white"><title>Профиль</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#header-user"></use></svg></button> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <!----> <!----> <div class="tm-page-width"></div> <main class="tm-layout__container"><div hl="ru" companyName="simbirsoft" data-async-called="true" class="tm-page"><div class="tm-page-width"><div class="tm-page__header"><!----></div> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><!----> <div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg height="24" width="24" class="tm-svg-img pull-down__icon pull-down__arrow"><title>Обновить</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet tm-article-snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/SSul/" title="SSul" class="tm-user-info__userpic"><div class="tm-entity-image"><img alt height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/706/d68/c8a/706d68c8a77a515426d4c883072509a9.png" width="32" class="tm-entity-image__pic"></div></a> <span class="tm-user-info__user tm-user-info__user_appearance-default"><a href="/ru/users/SSul/" class="tm-user-info__username">
      SSul
      <!----></a> <span class="tm-article-datetime-published"><time datetime="2022-11-23T07:50:57.000Z" title="2022-11-23, 10:50">23  ноя  2022 в 10:50</time></span></span></span></div> <!----></div> <h1 lang="ru" class="tm-title tm-title_h1"><span>Как работать с процессами и потоками в Python</span></h1> <div class="tm-article-snippet__stats"><!----> <div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Время на прочтение</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#clock"></use></svg></span> <span class="tm-article-reading-time__label">
    16 мин
  </span></div> <span class="tm-icon-counter tm-data-icons__item"><svg height="24" width="24" class="tm-svg-img tm-icon-counter__icon"><title>Количество просмотров</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#counter-views"></use></svg> <span class="tm-icon-counter__value">37K</span></span></div> <div class="tm-publication-hubs__container"><div class="tm-publication-hubs"><span class="tm-publication-hub__link-container"><a href="/ru/companies/simbirsoft/articles/" class="router-link-active tm-publication-hub__link"><span>Блог компании SimbirSoft</span> <!----></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/python/" class="tm-publication-hub__link"><span>Python</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><span>Программирование</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/parallel_programming/" class="tm-publication-hub__link"><span>Параллельное программирование</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span></div></div> <!----> <!----> <!----></div></div> <!----> <div data-gallery-root="" lang="ru" class="tm-article-body"><div></div> <div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками усваиваются, лишь когда столкнешься с ними на практике. Во-вторых, в контексте Python тоже много своих подводных камней. Но сегодня почти любой современный web-сервис сталкивается с необходимостью многопоточности или асинхронности. Поскольку это многопользовательская среда, мы хотим направить всю процессорную мощность не на ожидание, а на решение прикладных задач бизнеса, чтобы все пользователи вовремя получили необходимые данные. </p><p>Эта статья будет полезна тем разработчикам, которые хотят выполнять больше работы за одно и то же время, и задействовать все ресурсы своего железа. Проще говоря, делать больше, и при этом обходиться меньшими ресурсами. Пусть железо работает, а не простаивает.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/10d/612/12b/10d61212b1a6e5341d4b66901be879c5.png" width="780" height="440" data-src="https://habrastorage.org/getpro/habr/upload_files/10d/612/12b/10d61212b1a6e5341d4b66901be879c5.png"/><figcaption></figcaption></figure><p>Давайте возьмем за отправную точку ситуацию, когда у нас есть приложение, которое работает по стандартной схеме <strong>клиент – сервер:</strong></p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/29d/d70/e74/29dd70e74d9999d9cfc222bb23403877.png" width="1920" height="938" data-src="https://habrastorage.org/getpro/habr/upload_files/29d/d70/e74/29dd70e74d9999d9cfc222bb23403877.png"/><figcaption></figcaption></figure><p>Клиент посылает запрос и получает ответ. А теперь представьте, что в нашем приложении есть кнопка, которая формирует большой отчет. Когда пользователь нажимает на нее, программа долго обрабатывает запрос. Клиент ждет ответа, и пока отчет не будет сформирован, он не сможет пользоваться интерфейсом приложения.</p><p>Как мы можем помочь пользователю продолжить взаимодействие с нашим приложением, пока формируется отчет? Мы можем создать отдельный процесс, отдельный поток, и выполнять код асинхронно.</p><p>Рассмотрим каждое понятие отдельно.</p><h2>Процессы</h2><p>Процессы являются контейнерами. Их основная задача – изолировать программы друг от друга, чтобы одна не могла получить доступ к памяти другой.</p><p>В контексте Python каждому процессу выделен свой интерпретатор. Когда мы запускаем несколько процессов из кода, то мы обнаруживаем такое же количество процессов в мониторинге системы.</p><p>Небольшой пример создания процессов:</p><pre><code class="python">from multiprocessing import Process

def print_word(word):
    print('hello,', word)

if __name__ == '__main__':
    p1 = Process(target=print_word, args=('bob',), daemon=True)
    p2 = Process(target=print_word, args=('alice',), daemon=True)
    p1.start()
    p2.start()
    p1.join()
    p2.join()</code></pre><p>Процессы представлены как экземпляр класса Process из встроенной библиотеки multiprocessing.</p><p>У нас есть функция, которая принимает 1 параметр и печатает приветствие с переданным параметром. Внутри конструкции if мы создаем два процесса p1 и p2 в качестве параметров, то есть мы передаем:</p><p><strong>target </strong>– с названием выполняемой функции,</p><p><strong>args </strong>– параметры для функции, которую мы будем вызывать,</p><p><strong>daemon </strong>– с флагом True, который говорит нам, что процесс будет являться «демоном» – об этом чуть позже.</p><p>Для того чтобы процесс стартовал, мы вызываем у каждого метод .start().</p><p>Но ниже мы вызываем еще и метод .join().</p><h3>Для чего нужен join() и что такое daemon? Или основные и фоновые процессы</h3><p>У нас есть основной (<strong>главный</strong>) процесс, который содержит весь код нашей программы, и два дополнительных (<strong>фоновых</strong>) p1, p2. Их мы создаем, когда мы прописываем параметр daemon=True. Так мы как раз и указываем, что эти два процесса будут второстепенными. Если мы не вызовем метод join у фонового процесса, то наша программа завершит свое выполнение, не дожидаясь выполнения p1 и p2.</p><h4>Немного теории о процессах</h4><p>Процессы не могут работать параллельно на одноядерной машине. </p><p>Параллельное вычисление – выполнение двух и более задач одновременно, когда каждое ядро процессора берет задачу и выполняет ее. На многоядерной машине параллельное вычисление – нормальная практика. Однако количество ядер у нас ограничено, причем весьма сильно, а процессов в системе работает много.</p><p>Познакомимся с еще одним термином — вытесняющая многозадачность.</p><p><strong>Вытесняющая многозадачность </strong>— это такой способ управления задачами, при котором решение о переключении процессора с выполнения одного процесса на выполнение другого принимается планировщиком операционной системы.</p><p>Предположим, что у нас одноядерный процессор и ему приходится выполнять работу множества программ одновременно. Как он это делает?</p><p>В этом случае каждой программе выделяется небольшой промежуток времени, то есть программы конкурируют за доступ к ядру. Процессор сам переключает контекст выполнения, и таким образом создается впечатление, что программы работают одновременно. Но это не совсем так.</p><p>Проще говоря, одна программа поработала какое-то время, и процессор переключает контекст на другую, чтобы она выполнила запланированные действия, передала обратно и так далее.</p><p>Когда количество процессов превышает количество ядер, на помощь приходит конкурентное вычисление.</p><h2>Потоки</h2><p>Первое, о чем хотим сказать про потоки — интерфейсы работы с процессами и потоками в Python очень похожи.</p><p>Потоки живут внутри процессов, потребляют меньше ресурсов и разделяют общую память внутри процесса. Во многих языках программирования потоки создавались именно для того, чтобы выполнять задачи параллельно, но не в Python. А виноват в этом GIL.</p><p><strong>GIL (Global interpreter lock)</strong> следит за тем, чтобы в один момент времени работал лишь один поток. Механизм похож на то, как процессы конкурируют за ядро. Но в отличие от процессов GIL освобождается при вызове блокирующей функции операций ввода/вывода. Другой механизм его освобождения – time.sleep(). Об этом позже.</p><pre><code class="python">import threading


def greet(name):
    print('hello: ', name)


if __name__ == '__main__':
    t1 = threading.Thread(target=greet, args=('bob',), daemon=True)
    t2 = threading.Thread(target=greet, args=('alice',), daemon=True)
    t1.start()
    t2.start()
    t1.join()
    t2.join()</code></pre><p>Как видно, процесс создания потоков идентичен алгоритму формирования процессов.</p><p>Теперь, когда мы познакомились с основными понятиями, продемонстрируем несколько проблем, которые встречаются в многопоточном программировании.</p><p>Первая проблема – <strong>Race Condition или состояние гонки</strong>.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/1c9/7c9/bbe/1c97c9bbe6dc9eee3e74c842bd921e9b.png" width="1920" height="731" data-src="https://habrastorage.org/getpro/habr/upload_files/1c9/7c9/bbe/1c97c9bbe6dc9eee3e74c842bd921e9b.png"/><figcaption></figcaption></figure><p>На изображении мы видим два запуска одной и той же программы, в которой есть два потока: в первом функция увеличивает переданное число на единицу, а во втором — мы умножаем число на 2.</p><p><strong>Слева </strong>вы видите первый запуск программы. Первый поток берет значение из глобальной переменной x, прибавляет 1 и записывает в x результат = 3. Затем второй поток начинает работу. Он берет из переменной x значение 3, умножает на 2 и записывает результат = 6.</p><p>На <strong>правой </strong>схеме – второй запуск программы, где сперва в работу вступает поток 2, он выполняет те же операции, берет x = 2, умножает на 2 и фиксирует результат 4. Затем вступает  поток 1, читает 4 из x, увеличивает на единицу и записывает 5.</p><p>Так как оба потока меняли порядок работы программы, но выполняли ее по очереди, у нас не возникало никакого конфликта, и мы получали ожидаемый результат.</p><p><strong>Но давайте посмотрим на такой поток выполнения:</strong></p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b2b/44a/7fc/b2b44a7fc5d765d3440c38e5101b1979.png" width="1920" height="731" data-src="https://habrastorage.org/getpro/habr/upload_files/b2b/44a/7fc/b2b44a7fc5d765d3440c38e5101b1979.png"/><figcaption></figcaption></figure><p>Поток 1 вступает в работу, читает переменную x и переключает контекст на поток 2 (context switch). Затем поток 2 берет значение из x = 2, умножает на 2 и записывает в x = 4. Процессор переключает контекст на поток 1, а в потоке 1, как мы помним, сохранено значение x = 2. В итоге он увеличивает значение на единицу и записывает в x = 3, а значит, на выходе мы получаем 3.</p><p>Один поток обогнал другой при переключении контекста, и мы получили непредсказуемый результат. Такое событие называется <strong>Race condition</strong>. Как тогда быть уверенным в том, что поток, взявший в работу какие-то данные, выполнит свою работу, перед тем как переключит свой контекст на другой потоку?</p><p>Вот пример:</p><pre><code class="python">```
from threading import Thread
from time import sleep

counter = 0


def increase(by):
    global counter

    local_counter = counter
    local_counter += by

    sleep(0.1)

    counter = local_counter
    print(f'{counter=}')


t1 = Thread(target=increase, args=(10,))
t2 = Thread(target=increase, args=(20,))

t1.start()
t2.start()

t1.join()
t2.join()
```</code></pre><p>Посмотрим на результат:</p><pre><code class="python">```
counter=10
counter=20
```</code></pre><p>Вместо 30 получаем 20.</p><p>На помощь нам может прийти такое понятие как <strong>Lock</strong>.</p><p><strong>Lock (замок) </strong>– объект, который захватывает поток, и пока поток не освободит (release) Lock, другие потоки не смогут ничего сделать с этими данными, захваченными при помощи замка.</p><pre><code class="python">```
from threading import Thread, Lock
from time import sleep

counter = 0


def increase(by, lock: Lock):
    global counter

    lock.acquire()

    local_counter = counter
    local_counter += by

    sleep(0.1)

    counter = local_counter
    print(f'{counter=}')

    lock.release()


lock = Lock()

t1 = Thread(target=increase, args=(10, lock,))
t2 = Thread(target=increase, args=(20, lock,))

t1.start()
t2.start()

t1.join()
t2.join()
```</code></pre><p>Вот теперь как и должно быть:</p><pre><code class="python">```
counter=10
counter=30
```</code></pre><p>Несмотря на то, что <strong>Lock </strong>помогает решить проблему с <strong>Race condition</strong>, он может привести к другой сложной ситуации, когда один поток ждет освобождение одного замка, а другой ждет освобождение от первого. Такое ожидание приводит к ситуации взаимного тупика, известного как <strong>Deadlock</strong>.</p><pre><code class="python">```
from threading import Thread, Lock
from time import sleep

a = 5
b = 10

a_lock = Lock()
b_lock = Lock()


def function_a():
    global a
    global b

    a_lock.acquire()
    print('Функция a, a_lock = заблокирован')
    sleep(1)
    b_lock.acquire()
    print('Функция a, b_lock = заблокирован')

    sleep(1)

    a_lock.release()
    print('Функция a, a_lock = разблокирован')
    b_lock.release()
    print('Функция a, b_lock = разблокирован')


def function_b():
    global a
    global b

    b_lock.acquire()
    print('Функция b, b_lock = заблокирован')
    a_lock.acquire()
    print('Функция b, a_lock = заблокирован')

    sleep(1)

    b_lock.release()
    print('Функция b, b_lock = разблокирован')
    a_lock.release()
    print('Функция b, a_lock = разблокирован')


t1 = Thread(target=function_a)
t2 = Thread(target=function_b)

t1.start()
t2.start()

t1.join()
t2.join()

print('Готово')
```</code></pre><p>И теперь посмотрим результат:</p><pre><code class="python">```
Функция a, a_lock = заблокирован
Функция b, b_lock = заблокирован
```</code></pre><p>Наша программа зависает в ожидании разблокировки, которая никогда не произойдет. Так же <strong>Deadlock </strong>произойдет при попытке заблокировать наш <strong>Lock </strong>повторно в том же потоке.</p><p>Решить проблему с <strong>Deadlock </strong>могут помочь различные механизмы синхронизации потоков. Разберем один из таких примеров – <strong>Semaphore (Семафор)</strong>.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f3e/8dd/685/f3e8dd685990942bc4bed52863e5ba07.png" width="1920" height="806" data-src="https://habrastorage.org/getpro/habr/upload_files/f3e/8dd/685/f3e8dd685990942bc4bed52863e5ba07.png"/><figcaption></figcaption></figure><p><strong>Semaphore </strong>прост в понимании, если его представить в виде объекта, который ограничивает выполнение блока кода установленным количеством, по умолчанию это 1. При каждом вхождении в блок кода <strong>Semaphore</strong> счетчик уменьшается. Если счетчик дошел до 0, все потоки блокируются, и пока поток не освободит семафор, другие будут ждать разрешения подключиться.</p><p>Посмотрим <strong>Semaphore </strong>на примере реализации очереди из реального кейса.</p><pre><code class="python">```
import datetime
from threading import Semaphore, Thread
from time import sleep

s = Semaphore(3)


def semaphore_func(payload: int):
    s.acquire()
    now = datetime.datetime.now().strftime('%H:%M:%S')
    print(f'{now=}, {payload=}')
    sleep(2)
    s.release()


threads = [Thread(target=semaphore_func, args=(i,)) for i in range(7)]

for t in threads:
    t.start()

for t in threads:
    t.join()
```
</code></pre><p>В результате увидим, что функция выполнялась группами по 3 потока. То есть одновременно не может выполняться кусок кода с блокировкой через <strong>Semaphore </strong>больше, чем указан в инициализации класса <strong>Semaphore</strong>. Видим паузы в 2 секунды между блокировками.</p><pre><code class="python">```
now='00:49:51', payload=0
now='00:49:51', payload=1
now='00:49:51', payload=2
now='00:49:53', payload=3
now='00:49:53', payload=5
now='00:49:53', payload=4
now='00:49:55', payload=6
```</code></pre><p>Это удобно использовать, например, в таком виде: если база данных может держать не более 30 соединений, то инстанциируем <strong>Semaphore </strong>со значением 30. Блокируем, когда поднимаем соединение и разблокируем, когда освобождаем.</p><p>Есть несколько способов синхронизации потоков, которые подходят для тех или иных ситуации. Примеры можно посмотреть <a href="https://docs.python.org/3/library/asyncio-sync.html"><u>в документации</u></a>.</p><p>Теперь поговорим об освобождении GIL.</p><p>CPython управляет памятью с помощью подсчета ссылок. То есть для каждого объекта Python подсчитывается, сколько на него указывается ссылок с других объектов, использующих его в данный момент. При добавлении ссылки счетчик увеличивается, при удалении ссылки счетчик уменьшается. А когда счетчик ссылок становится 0 — это означает, что объект больше не нужен, и его можно удалить из памяти.</p><p>Следовательно, если не будет GIL, который запрещает Python процессу выполнять более одной команды байт-кода в каждый момент времени, то при подсчете ссылок может случиться Race-condition, с подсчетом ссылок на объекты, как это было в примере с переменными выше.</p><p>Итак, раз GIL запрещает одновременное выполнение Python кода, из этого следует, что он высвобождается, когда Python код не выполняется. Когда мы ждем, например, пока считается файл с диска или придет ответ на запрос к сайту. Так как в этом случае низкоуровневые системные вызовы работают за пределами Python кода и среды выполнения, и код операционной системы не взаимодействует напрямую с объектами Python, соответственно, они не увеличивают и не уменьшают счетчик ссылок. GIL захватывается снова, когда данные переносятся в объект Python.</p><p>Стало быть, если мы сделаем библиотеку, даже с CPU-bound нагрузкой, где мы не взаимодействуем с объектами Python (словарями, списками, целыми числами и т. д.) или большая часть библиотеки не взаимодействует, то мы можем освободить GIL. Например, библиотеки hashlib и NumPy выполняют расчеты на чистом C и освобождают GIL.</p><p>time.sleep() — реализация этой функции освобождает GIL и выполняется на уровне системы и работает вне кода Python.</p><p>Как видите, в многопоточности существует огромное количество нюансов и проблем. В реальных больших программах будет непросто понять, где происходит ошибка. Рассмотрим, как можно распараллелить выполнение программ. В этом поможет асинхронность.</p><h2>Асинхронность</h2><p>Для того чтобы лучше понять асинхронность, окунемся в далекий 1992 год. Тогда была выпущена операционная система Windows 3.1 которая использовала кооперативную многозадачность.</p><p><strong>Кооперативная многозадачность </strong>— это тип многозадачности, при котором фоновые задачи выполняются только во время простоя основного процесса и только в том случае, если на это получено разрешение основного процесса.</p><p>То есть время, когда исполняемая программа управляет передачей управления другому процессу и передачей процессорного времени.</p><p><strong>Недостатком </strong>такого исполнения является то, что если одна задача зависла. Зависает вся система. </p><p>А вот <strong>преимущества </strong>такого решения: разработчик программы отдает управление тогда, когда он посчитает это нужным.</p><p>Теперь мы подобрались к понятию асинхронного программирования.</p><p><strong>Асинхронное программирование </strong>— выполнение программы в неблокирующем режиме системного вызова, что позволяет потоку программы продолжить работу.</p><p>Благодаря асинхронному программированию в одном процессе и даже потоке мы можем выполнять сразу множество задач. Как же это происходит?</p><p>В реальном программировании, а особенно в web-разработке мы очень часто чего-то ждём и не делаем полезной работы. Вот несколько примеров:</p><ul><li><p>Отправили запрос на сторонний ресурс и ждем ответа.</p></li><li><p>Отправили запрос в базу данных и ждем результата запроса.</p></li><li><p>Читаем или записываем файл на диск.</p></li><li><p>И так далее.</p></li></ul><p>Получается что мы ждем, ждем и ждем. А в это время наша программа могла бы выполнить множество полезной нагрузки. И мы как разработчики ПО точно знаем, где мы будем ожидать. Ничего не напоминает? Да! Похоже на <strong>кооперативную многозадачность</strong>, но только не на уровне операционной системы, а на уровне процесса.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/598/9c4/536/5989c4536adbbd89b147300832920135.png" width="1920" height="806" data-src="https://habrastorage.org/getpro/habr/upload_files/598/9c4/536/5989c4536adbbd89b147300832920135.png"/><figcaption></figcaption></figure><p>На рисунке видно, что периодов ожидания много. А что будет если во время ожидания мы будем выполнять полезную работу?</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/730/a2d/dad/730a2ddad3fcddc5fc984280d86c0075.png" width="1920" height="806" data-src="https://habrastorage.org/getpro/habr/upload_files/730/a2d/dad/730a2ddad3fcddc5fc984280d86c0075.png"/><figcaption></figcaption></figure><p>Как видно на рисунке, в моменты ожидания мы выполняем уже две задачи за то же самое время. Чем быстрее мы выполняем работу и чем дольше мы ожидаем, тем больше задач мы можем сделать за одно и то же время.</p><p>Для реализации такого поведения асинхронности есть несколько подходов:</p><ul><li><p>Реализация на основе коллбэков.</p></li><li><p>Реализация на основе корутин.</p></li></ul><p>Оба подхода имеют место. Например, мощный фреймворк TORNADO реализован именно на основе коллбэков. </p><p><strong><br/>У этого подхода есть ряд недостатков:</strong></p><ul><li><p>Код перестает выглядеть как синхронный, что усложняет отладку.</p></li><li><p>Ад коллбэков, в котором будет сложно разобраться. Просто погуглите фразу “callback hell”.</p></li></ul><p>Если после этих минусов желание попробовать ещё осталось, то можно в подходе легко разобраться.</p><p>А вот подход на основе корутин мы разберем более глубоко. У него также есть ряд преимуществ и недостатков:</p><p><strong>Плюсы:</strong></p><ul><li><p>Асинхронный код выглядит как синхронный.</p></li><li><p>Нет проблем с общей памятью, и избавляемся от синхронизаций.</p></li><li><p>Не нужно переключать контекст между задачами, что экономит ресурсы нашего компьютера.</p></li><li><p>Теперь нам не нужны коллбэки, но их также можно использовать.</p></li></ul><p><strong>Минусы:</strong></p><ul><li><p>Чуть более сложный подход для понимания.</p></li></ul><p>В Python есть ряд библиотек, которые позволяют работать с асинхронностью:</p><ul><li><p><strong>asyncio </strong>— основная библиотека для работы с асинхронным программированием,</p></li><li><p><strong>aiohttp</strong> — для асинхронной работы с запросами,</p></li><li><p><strong>aiofiles</strong> — для работы с файловой системой.</p></li></ul><p>Как вы наверное заметили, у библиотек есть префикс <strong>aio (asynchronous input output, асинхронный ввод-вывод).</strong> Тут как раз решается проблема ожидания. Такие задачи называют <strong>IO bound</strong>.</p><p>Рассмотрим термины, которые нам помогут во всём разобраться.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/cb6/011/c84/cb6011c843e061bde93b3ff7011e0b2e.png" width="3632" height="1609" data-src="https://habrastorage.org/getpro/habr/upload_files/cb6/011/c84/cb6011c843e061bde93b3ff7011e0b2e.png"/><figcaption></figcaption></figure><p><strong>Event loop (цикл событий) </strong>— ядро каждого приложения asyncio. Циклы событий запускают асинхронные задачи и обратные вызовы, выполняют операции сетевого ввода-вывода и запускают подпроцессы. Официальную документацию можно прочесть <a href="https://docs.python.org/dev/library/asyncio-eventloop.html"><u>тут</u></a>.</p><p><a href="https://docs.python.org/3.5/library/asyncio-task.html#coroutines"><strong><u>Корутины</u></strong></a> — это специальные функции, которые запускаются, используя цикл событий. У них есть особенность — они говорят, когда они будут ждать и передают управление обратно, чтобы другая задача могла выполняться во время ожидания.</p><p><a href="https://docs.python.org/3.5/library/asyncio-task.html#future"><strong><u>Футуры</u></strong></a> — это определение обычно воспринимается тяжелее всего, но я постараюсь объяснить как можно проще. Это объект, в котором хранится результат и состояние задачи: </p><p>+ ожидание (pending) </p><p>+ выполнение (running) </p><p>+ выполнено (done) </p><p>+ отменено (cancelled)</p><p>То есть в процессе работы мы можем управлять задачами в зависимости от футуры (статус/результат) задачи.</p><p>Корутины могут быть реализованы с использованием генераторов или async/await. Мы выбираем второй вариант как более лаконичный.</p><p>Посмотрим, как это выглядит в коде. </p><p>Создадим первую корутину:</p><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждем
    print('Переключение контекста в функцию hello')
```</code></pre><p>Теперь у нас есть асинхронная функция. Научимся теперь её запускать. Первое, что хочется сделать — вызвать её как обычную функцию. Давайте попробуем:</p><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')

hello()
```</code></pre><p>При выполнении ничего не произошло. А вот наш друг интерпретатор выдал предупреждение.</p><pre><code class="python">```
RuntimeWarning: coroutine 'hello' was never awaited
  hello()
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
```</code></pre><p>Тут из сообщения становится понятно, что при вызове таким образом асинхронной функции она превращается в асинхронную корутину.</p><p>Как же можно запустить корутину?</p><ul><li><p>Из другой корутины.</p></li><li><p>Обернуть в задачу.</p></li><li><p>Запустить через метод asyncio.run и  run_until_complete из цикла событий.</p></li></ul><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')


asyncio.run(hello())
```</code></pre><p>И получили результат, который ожидали.</p><pre><code class="python">```
Запуск функции hello
Переключение контекста в функцию hello
```</code></pre><p>Вызов метода <strong>asyncio.run(hello()) </strong>принимает корутину, которую необходимо выполнить, открывает цикл событий, выполняет корутину и закрывает цикл событий.</p><p>Что делать, если необходимо запустить две задачи конкурентно?</p><p>Это поможет нам сделать <strong>asyncio.gather</strong>, но раз функция<strong> asyncio.run</strong> принимает только одну корутину, создадим новую корутину, которая будет запускать конкурентно несколько задач.</p><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')


async def starter():
    await asyncio.gather(hello(), hello())


asyncio.run(starter())
```</code></pre><p>И получаем тот результат, который ожидали.</p><pre><code class="python">```
Запуск функции hello
Запуск функции hello
Переключение контекста в функцию hello
Переключение контекста в функцию hello
```</code></pre><p>Время выполнения около 5 секунд. Если бы две функции выполнялись синхронно, то время выполнения составило около 10 секунд.</p><p>А если нам необходимо выполнить 10 тысяч раз, сколько времени это займёт? Видоизменяем код:</p><pre><code class="python">```
import asyncio
import time

start = time.time() ## точка отсчета времени

async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')


async def starter():
    await asyncio.gather(*[hello() for i in range(10000)])

asyncio.run(starter())

end = time.time() - start
print(end)
```</code></pre><p>Получаем результат. Посмотрим на вывод последних нескольких строк, которые нам говорят, сколько минут выполнялся код.</p><pre><code class="python">```
…
Переключение контекста в функцию hello
Переключение контекста в функцию hello
Переключение контекста в функцию hello
5.27926778793335
```</code></pre><p>Неплохо. Чуть больше тех же самых 5 секунд. </p><p><strong>Что же это значит?</strong> Представьте, что запрос на сторонний сайт занимает порядка 5 секунд. И нам необходимо получить результат тех же самых 10000 запросов. Используя асинхронное программирование, 10 тысяч запросов сеть будут выполняться чуть больше 5 секунд. Правда, здорово?</p><p>Но мы пойдем дальше и будем уже более гибко и детально работать с асинхронным выполнением:</p><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')


async def bye():
    print('Запуск функции bye')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию byе')


ioloop = asyncio.get_event_loop()
tasks = [ioloop.create_task(hello()), ioloop.create_task(bye())]
tasks_for_wait = asyncio.wait(tasks)
ioloop.run_until_complete(tasks_for_wait)
ioloop.close()
```</code></pre><p>В этом примере мы более гибко управляем циклом событий. Сначала получаем/создаем основной цикл событий. Затем создаем задачи и объединяем их запускаем на выполнение, пока не завершится. Затем уже закрываем цикл событий. Нужно помнить, что порядок выполнения задач при конкурентном выполнении мы не можем гарантировать, и необходимо разрабатывать приложения с учетом этой особенности.</p><p>Теперь давайте попробуем управлять выполнениями задач и рассмотрим код ниже:</p><pre><code class="python">```
import asyncio


async def hello():
    print('Запуск функции hello')
    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию hello')
    return 'Выполнена функция hello'


async def bye():
    print('Запуск функции bye')
    await asyncio.sleep(2)  # Отдаем управление обратно в Event loop пока ждём
    print('Переключение контекста в функцию byе')
    return 'Выполнена функция bye'


async def starter(ioloop):
    tasks = [ioloop.create_task(hello()), ioloop.create_task(bye())]
    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
    result = done.pop().result()

    for pending_future in pending:
        pending_future.cancel()

    print(result)


ioloop = asyncio.get_event_loop()
ioloop.run_until_complete(starter(ioloop))
ioloop.close()
```</code></pre><p>Результат будет таким:</p><pre><code>```
Запуск функции hello
Запуск функции bye
Переключение контекста в функцию byе
Выполнена функция bye
```</code></pre><p>Теперь только представьте, какие возможности у нас открылись! Например, мы можем запрашивать курсы валют сразу с нескольких ресурсов, и принимать результат того, который быстрее ответит. Чувствуете, как растет скорость и устойчивость приложения?</p><p>Или ещё такой пример. Мы можем динамически добавлять новые задачи, когда одна из задач выполнена. Например, парсить сайт в 20 задач. Только в этом случае добавляем к футурам в статусе <strong>pending </strong>новую задачу.</p><p>А самое приятное — наши асинхронные задачи выглядят как синхронные:</p><ul><li><p>Работая в один поток, можно делать больше работы;</p></li><li><p>Удобная отладка;</p></li><li><p>Нет проблем с блокировками;</p></li><li><p>Можем использовать обратные вызовы (коллбэки) и отложенные обратные вызовы вдобавок к нашему асинхронному коду. Для этого посмотрите на методы цикла событий <strong>call_soon, call_later, call_at</strong>.</p></li></ul><p>Для работы с конкурентностью есть различные библиотеки, которые решают самые востребованные задачи IO:</p><ul><li><p><strong>aiohttp</strong> — работа с HTTP запросами;</p></li><li><p><strong>aiofiles</strong> — работа с файлами.</p></li></ul><p>Мы рассмотрели темы асинхронного и параллельного программирования. Теперь осталось дело за малым, опробовать всё это на практике. </p><h2>Итого</h2><h4>Отдельные процессы</h4><p><strong>Плюсы:</strong></p><p>+ Работают параллельно.</p><p>+ Используют все ресурсы ядра процессора.</p><p>+ Можно загрузить все ядра процессора.</p><p>+ Изолированная память.</p><p>+ Независимые системные процессы.</p><p>+ Подходит для CPU bound операций.</p><p><strong>Минусы:</strong></p><ul><li><p>Если необходимо использовать общую память, то необходимо синхронизировать, так как нет общих переменных.</p></li><li><p>Требуют больших ресурсов, так как запускают отдельный интерпретатор.</p></li></ul><p><strong>Используем там, где обрабатываемые данные не зависят от других процессов и данных. Например:</strong></p><p>	+ Расчет нейронных сетей.</p><p>	+ Обработка изолированных фотографий.</p><p>	+ Архивирование изолированных файлов.</p><p>	+ Конвертация форматов файлов.<br/></p><h4>Отдельные потоки</h4><p><strong>Плюсы:</strong></p><p>+ Работают параллельно.</p><p>+ Используют немного памяти.</p><p>+ Общая память.</p><p><strong>Минусы:</strong></p><ul><li><p>Одновременный доступ к памяти может приводить к конфликтам.</p></li><li><p>Сложный код.</p></li></ul><p><strong>Используем там, где код много раз ожидает, пока выполнится задача. Например:</strong></p><p>+ Работа с сетью.</p><h4>Асинхронность</h4><p><strong>Плюсы:</strong></p><p>+ Работает в одном процессе и в одном потоке.</p><p>+ Экономное использование памяти.</p><p>+ Подходит для I/O bound операций.</p><p>+ Работает конкурентно.</p><p><strong>Минусы:</strong></p><ul><li><p>Сложность отладки.</p></li><li><p>CPU bound операции блокируют все задачи.</p></li></ul><p><strong>Используем там, где код много раз ожидает. Например:</strong></p><p>+ Работа с сетью.</p><p>+ Работа с файловой системой.</p><p>Основываясь на конкретных плюсах и минусах, нам становится легче выбирать подход и грамотно использовать процессорное время и память. Хотя Python является мультипарадигменным языком общего назначения, на нем можно писать практически любые программы, используя любой подход. Но особенно приятно, когда ваш веб-сервис может держать в сотню раз больше соединений или отрабатывать запросы в 8 раз быстрее, обходясь меньшим количеством памяти.</p><p><strong>Спасибо за внимание! Надеемся, что этот материал был полезен для вас. </strong></p><p>Авторские материалы для разработчиков мы также публикуем в наших соцсетях – <a href="https://vk.com/simbirsoft_team"><u>ВК</u></a> и <a href="https://t.me/simbirsoft_dev"><u>Telegram</u></a>.</p><p></p></div></div></div> <!----> <!----></div> <!----> <!----></div> <!----> <div class="tm-article-presenter__meta"><div class="tm-article-presenter__meta-list tm-separated-list"><span class="tm-separated-list__title">Теги:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bpython%5D" class="tm-tags-list__link">python</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C%5D" class="tm-tags-list__link">многопоточность</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%5D" class="tm-tags-list__link">многопоточное программирование</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C%5D" class="tm-tags-list__link">асинхронность</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%5D" class="tm-tags-list__link">асинхронное программирование</a></li> <!----></ul></div> <div class="tm-article-presenter__meta-list tm-separated-list"><span class="tm-separated-list__title">Хабы:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/companies/simbirsoft/articles/" class="tm-hubs-list__link router-link-active">Блог компании SimbirSoft</a></li><li class="tm-separated-list__item"><a href="/ru/hubs/python/" class="tm-hubs-list__link">Python</a></li><li class="tm-separated-list__item"><a href="/ru/hubs/programming/" class="tm-hubs-list__link">Программирование</a></li><li class="tm-separated-list__item"><a href="/ru/hubs/parallel_programming/" class="tm-hubs-list__link">Параллельное программирование</a></li> <!----></ul></div></div></article></div> <!----></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg height="24" width="24" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article"><title>Всего голосов 20: ↑18 и ↓2</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#counter-rating"></use></svg> <span title="Всего голосов 20: ↑18 и ↓2" class="tm-votes-meter__value tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating">+16</span></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----> <!----> <button title="Добавить в закладки" type="button" class="bookmarks-button tm-data-icons__item"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Добавить в закладки</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#counter-favorite"></use></svg></span> <span title="Количество пользователей, добавивших публикацию в закладки" class="bookmarks-button__counter">
    185
  </span></button> <div title="Поделиться" class="tm-sharing tm-data-icons__item"><button type="button" class="tm-sharing__button"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button> <DIV class="v-portal" style="display:none;"></DIV></div> <div title="Читать комментарии" class="tm-article-comments-counter-link tm-data-icons__item"><a href="/ru/companies/simbirsoft/articles/701020/comments/" class="tm-article-comments-counter-link__link"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value">
      16
    </span></a> <!----></div> <!----> <DIV class="v-portal" style="display:none;"></DIV></div></div></div>  <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!----> <div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><!----> <div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/simbirsoft/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt height="40" src="//habrastorage.org/getpro/habr/company/da7/fca/ca8/da7fcaca8b145a0f223a8d22b6097f5b.png" width="40" class="tm-entity-image__pic"></div></a> <div class="tm-company-snippet__info"><a href="/ru/companies/simbirsoft/profile/" class="tm-company-snippet__title">SimbirSoft</a> <div class="tm-company-snippet__description">Лидер в разработке современных ИТ-решений на заказ</div></div></div> <div class="tm-article-author__buttons"><!----> <!----></div></div> <div class="tm-article-author__company-contacts"><a href="https://s.simbirsoft.com/4LKj" rel="noopener" target="_blank" class="tm-article-author__contact">
      Сайт
    </a><a href="https://vk.com/simbirsoft" rel="noopener" target="_blank" class="tm-article-author__contact">
      ВКонтакте
    </a><a href="https://telegram.me/simbirsoft_dev" rel="noopener" target="_blank" class="tm-article-author__contact">
      Telegram
    </a><a href="https://telegram.me/simbirsoft_depthdev" rel="noopener" target="_blank" class="tm-article-author__contact">
      Telegram
    </a><a href="https://vk.com/simbirsoft_team" rel="noopener" target="_blank" class="tm-article-author__contact">
      ВКонтакте
    </a></div> <div class="tm-article-author__separator"></div></div> <div class="tm-user-card tm-article-author__user-card tm-user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/SSul/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt src="//habrastorage.org/getpro/habr/avatars/706/d68/c8a/706d68c8a77a515426d4c883072509a9.png" class="tm-entity-image__pic"></div></a> <div class="tm-user-card__meta"><div title=" 126 голосов " class="tm-counter-container tm-karma tm-karma"><div class="tm-counter-container__header"><div class="tm-karma__votes tm-karma__votes_positive">
      74
    </div></div> <div class="tm-counter-container__footer"><div class="tm-karma__text">
      Карма
    </div> <DIV class="v-portal" style="display:none;"></DIV></div></div> <div title="Рейтинг пользователя" class="tm-counter-container"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        -1
      </span></div> <!----></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title tm-user-card__title_variant-article"><!----> <a href="/ru/users/SSul/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article">
          @SSul
        </a> <!----></div> <p class="tm-user-card__short-info tm-user-card__short-info tm-user-card__short-info_variant-article">Пользователь</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons tm-user-card__buttons_variant-article"><!----> <!----> <!----> <!----> <!----></div></div> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----></section>  <div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/simbirsoft/articles/701020/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Комментарии 16 
    </span></a> <!----></div></div></div>  <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2> </div> <!----></header> <div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><div class="tm-tabs tm-tabs"><div><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim">
        Лучшие за сутки
      </button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_slim">
        Похожие
      </button></span></div> <!----></div> <div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-article-cards"><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div></div> <!----> <!----> <!----> <!----></div> <!----></div></div> <!----></section> <div class="placeholder-wrapper"><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div> <div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li></ul></div> <div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div> <!----> <!----> <!----> <!----> <!----> <!----></div> <!----> </div></div></div></div></div> <div class="tm-page__sidebar"><!----></div></div></div></div></main> <!----></div> <!----> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><div class="tm-footer__title"><a href="/ru/" class="tm-svg-icon__wrapper tm-footer__title-link router-link-active"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div> <div class="tm-footer__social"><a href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>Facebook</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>Twitter</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>VK</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>Telegram</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>Youtube</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="36" width="36" class="tm-svg-img tm-svg-icon"><title>Яндекс Дзен</title> <use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a></div> <DIV class="v-portal" style="display:none;"></DIV> <button class="tm-footer__link"><svg height="16" width="16" class="tm-svg-img tm-footer__icon"><title>Язык</title> <use xlink:href="/img/megazord-v28.2fb1b1c1..svg#lang"></use></svg>
        Настройка языка
      </button> <a href="/ru/feedback/" class="tm-footer__link">
        Техническая поддержка
      </a> <a href="/berserk-mode-nope" class="tm-footer__link">
        Вернуться на старую версию
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2023, </span> <span class="tm-copyright__name"><a href="https://company.habr.com/" rel="noopener" target="_blank" class="tm-copyright__link">Habr</a></span></span></div></div></div></div> <!----> <!----></div> <div class="vue-portal-target"></div></div>
<script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"701020":{"id":"701020","timePublished":"2022-11-23T07:50:57+00:00","isCorporative":true,"lang":"ru","titleHtml":"Как работать с процессами и потоками в Python","leadData":{"textHtml":"\u003Cp\u003EРаскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками усваиваются, лишь когда столкнешься с ними на практике. Во-вторых, в контексте Python тоже много своих подводных камней. Но сегодня почти любой современный web-сервис сталкивается с необходимостью многопоточности или асинхронности. Поскольку это многопользовательская среда, мы хотим направить всю процессорную мощность не на ожидание, а на решение прикладных задач бизнеса, чтобы все пользователи во время получили необходимые данные.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЭта статья будет полезна тем разработчикам, которые хотят выполнять больше работы за одно и то же время и задействовать все ресурсы своего железа. Проще говоря, делать больше при этом обходиться меньшими ресурсами. Пусть железо работает, а не простаивает.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6fc\u002F723\u002Fdad\u002F6fc723dad2ebed67fd6b8d32b8830375.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6fc\u002F723\u002Fdad\u002F6fc723dad2ebed67fd6b8d32b8830375.png","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[],"author":{"id":"561281","alias":"SSul","fullname":null,"avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F706\u002Fd68\u002Fc8a\u002F706d68c8a77a515426d4c883072509a9.png","speciality":"Пользователь","scoreStats":{"score":74,"votesCount":126},"rating":-1,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null},"statistics":{"commentsCount":16,"favoritesCount":185,"readingCount":37082,"score":16,"votesCount":20,"votesCountPlus":18,"votesCountMinus":2},"hubs":[{"id":"19701","alias":"simbirsoft","type":"corporative","title":"Блог компании SimbirSoft","titleHtml":"Блог компании SimbirSoft","isProfiled":false,"relatedData":null},{"id":"340","alias":"python","type":"collective","title":"Python","titleHtml":"Python","isProfiled":true,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null},{"id":"17822","alias":"parallel_programming","type":"collective","title":"Параллельное программирование","titleHtml":"Параллельное программирование","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":null,"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003EРаскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками усваиваются, лишь когда столкнешься с ними на практике. Во-вторых, в контексте Python тоже много своих подводных камней. Но сегодня почти любой современный web-сервис сталкивается с необходимостью многопоточности или асинхронности. Поскольку это многопользовательская среда, мы хотим направить всю процессорную мощность не на ожидание, а на решение прикладных задач бизнеса, чтобы все пользователи вовремя получили необходимые данные. \u003C\u002Fp\u003E\u003Cp\u003EЭта статья будет полезна тем разработчикам, которые хотят выполнять больше работы за одно и то же время, и задействовать все ресурсы своего железа. Проще говоря, делать больше, и при этом обходиться меньшими ресурсами. Пусть железо работает, а не простаивает.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F10d\u002F612\u002F12b\u002F10d61212b1a6e5341d4b66901be879c5.png\" width=\"780\" height=\"440\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F10d\u002F612\u002F12b\u002F10d61212b1a6e5341d4b66901be879c5.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EДавайте возьмем за отправную точку ситуацию, когда у нас есть приложение, которое работает по стандартной схеме \u003Cstrong\u003Eклиент – сервер:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F29d\u002Fd70\u002Fe74\u002F29dd70e74d9999d9cfc222bb23403877.png\" width=\"1920\" height=\"938\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F29d\u002Fd70\u002Fe74\u002F29dd70e74d9999d9cfc222bb23403877.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EКлиент посылает запрос и получает ответ. А теперь представьте, что в нашем приложении есть кнопка, которая формирует большой отчет. Когда пользователь нажимает на нее, программа долго обрабатывает запрос. Клиент ждет ответа, и пока отчет не будет сформирован, он не сможет пользоваться интерфейсом приложения.\u003C\u002Fp\u003E\u003Cp\u003EКак мы можем помочь пользователю продолжить взаимодействие с нашим приложением, пока формируется отчет? Мы можем создать отдельный процесс, отдельный поток, и выполнять код асинхронно.\u003C\u002Fp\u003E\u003Cp\u003EРассмотрим каждое понятие отдельно.\u003C\u002Fp\u003E\u003Ch2\u003EПроцессы\u003C\u002Fh2\u003E\u003Cp\u003EПроцессы являются контейнерами. Их основная задача – изолировать программы друг от друга, чтобы одна не могла получить доступ к памяти другой.\u003C\u002Fp\u003E\u003Cp\u003EВ контексте Python каждому процессу выделен свой интерпретатор. Когда мы запускаем несколько процессов из кода, то мы обнаруживаем такое же количество процессов в мониторинге системы.\u003C\u002Fp\u003E\u003Cp\u003EНебольшой пример создания процессов:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003Efrom multiprocessing import Process\n\ndef print_word(word):\n    print('hello,', word)\n\nif __name__ == '__main__':\n    p1 = Process(target=print_word, args=('bob',), daemon=True)\n    p2 = Process(target=print_word, args=('alice',), daemon=True)\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПроцессы представлены как экземпляр класса Process из встроенной библиотеки multiprocessing.\u003C\u002Fp\u003E\u003Cp\u003EУ нас есть функция, которая принимает 1 параметр и печатает приветствие с переданным параметром. Внутри конструкции if мы создаем два процесса p1 и p2 в качестве параметров, то есть мы передаем:\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003Etarget \u003C\u002Fstrong\u003E– с названием выполняемой функции,\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003Eargs \u003C\u002Fstrong\u003E– параметры для функции, которую мы будем вызывать,\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003Edaemon \u003C\u002Fstrong\u003E– с флагом True, который говорит нам, что процесс будет являться «демоном» – об этом чуть позже.\u003C\u002Fp\u003E\u003Cp\u003EДля того чтобы процесс стартовал, мы вызываем у каждого метод .start().\u003C\u002Fp\u003E\u003Cp\u003EНо ниже мы вызываем еще и метод .join().\u003C\u002Fp\u003E\u003Ch3\u003EДля чего нужен join() и что такое daemon? Или основные и фоновые процессы\u003C\u002Fh3\u003E\u003Cp\u003EУ нас есть основной (\u003Cstrong\u003Eглавный\u003C\u002Fstrong\u003E) процесс, который содержит весь код нашей программы, и два дополнительных (\u003Cstrong\u003Eфоновых\u003C\u002Fstrong\u003E) p1, p2. Их мы создаем, когда мы прописываем параметр daemon=True. Так мы как раз и указываем, что эти два процесса будут второстепенными. Если мы не вызовем метод join у фонового процесса, то наша программа завершит свое выполнение, не дожидаясь выполнения p1 и p2.\u003C\u002Fp\u003E\u003Ch4\u003EНемного теории о процессах\u003C\u002Fh4\u003E\u003Cp\u003EПроцессы не могут работать параллельно на одноядерной машине. \u003C\u002Fp\u003E\u003Cp\u003EПараллельное вычисление – выполнение двух и более задач одновременно, когда каждое ядро процессора берет задачу и выполняет ее. На многоядерной машине параллельное вычисление – нормальная практика. Однако количество ядер у нас ограничено, причем весьма сильно, а процессов в системе работает много.\u003C\u002Fp\u003E\u003Cp\u003EПознакомимся с еще одним термином — вытесняющая многозадачность.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EВытесняющая многозадачность \u003C\u002Fstrong\u003E— это такой способ управления задачами, при котором решение о переключении процессора с выполнения одного процесса на выполнение другого принимается планировщиком операционной системы.\u003C\u002Fp\u003E\u003Cp\u003EПредположим, что у нас одноядерный процессор и ему приходится выполнять работу множества программ одновременно. Как он это делает?\u003C\u002Fp\u003E\u003Cp\u003EВ этом случае каждой программе выделяется небольшой промежуток времени, то есть программы конкурируют за доступ к ядру. Процессор сам переключает контекст выполнения, и таким образом создается впечатление, что программы работают одновременно. Но это не совсем так.\u003C\u002Fp\u003E\u003Cp\u003EПроще говоря, одна программа поработала какое-то время, и процессор переключает контекст на другую, чтобы она выполнила запланированные действия, передала обратно и так далее.\u003C\u002Fp\u003E\u003Cp\u003EКогда количество процессов превышает количество ядер, на помощь приходит конкурентное вычисление.\u003C\u002Fp\u003E\u003Ch2\u003EПотоки\u003C\u002Fh2\u003E\u003Cp\u003EПервое, о чем хотим сказать про потоки — интерфейсы работы с процессами и потоками в Python очень похожи.\u003C\u002Fp\u003E\u003Cp\u003EПотоки живут внутри процессов, потребляют меньше ресурсов и разделяют общую память внутри процесса. Во многих языках программирования потоки создавались именно для того, чтобы выполнять задачи параллельно, но не в Python. А виноват в этом GIL.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EGIL (Global interpreter lock)\u003C\u002Fstrong\u003E следит за тем, чтобы в один момент времени работал лишь один поток. Механизм похож на то, как процессы конкурируют за ядро. Но в отличие от процессов GIL освобождается при вызове блокирующей функции операций ввода\u002Fвывода. Другой механизм его освобождения – time.sleep(). Об этом позже.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003Eimport threading\n\n\ndef greet(name):\n    print('hello: ', name)\n\n\nif __name__ == '__main__':\n    t1 = threading.Thread(target=greet, args=('bob',), daemon=True)\n    t2 = threading.Thread(target=greet, args=('alice',), daemon=True)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКак видно, процесс создания потоков идентичен алгоритму формирования процессов.\u003C\u002Fp\u003E\u003Cp\u003EТеперь, когда мы познакомились с основными понятиями, продемонстрируем несколько проблем, которые встречаются в многопоточном программировании.\u003C\u002Fp\u003E\u003Cp\u003EПервая проблема – \u003Cstrong\u003ERace Condition или состояние гонки\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1c9\u002F7c9\u002Fbbe\u002F1c97c9bbe6dc9eee3e74c842bd921e9b.png\" width=\"1920\" height=\"731\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1c9\u002F7c9\u002Fbbe\u002F1c97c9bbe6dc9eee3e74c842bd921e9b.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EНа изображении мы видим два запуска одной и той же программы, в которой есть два потока: в первом функция увеличивает переданное число на единицу, а во втором — мы умножаем число на 2.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EСлева \u003C\u002Fstrong\u003Eвы видите первый запуск программы. Первый поток берет значение из глобальной переменной x, прибавляет 1 и записывает в x результат = 3. Затем второй поток начинает работу. Он берет из переменной x значение 3, умножает на 2 и записывает результат = 6.\u003C\u002Fp\u003E\u003Cp\u003EНа \u003Cstrong\u003Eправой \u003C\u002Fstrong\u003Eсхеме – второй запуск программы, где сперва в работу вступает поток 2, он выполняет те же операции, берет x = 2, умножает на 2 и фиксирует результат 4. Затем вступает  поток 1, читает 4 из x, увеличивает на единицу и записывает 5.\u003C\u002Fp\u003E\u003Cp\u003EТак как оба потока меняли порядок работы программы, но выполняли ее по очереди, у нас не возникало никакого конфликта, и мы получали ожидаемый результат.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EНо давайте посмотрим на такой поток выполнения:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb2b\u002F44a\u002F7fc\u002Fb2b44a7fc5d765d3440c38e5101b1979.png\" width=\"1920\" height=\"731\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb2b\u002F44a\u002F7fc\u002Fb2b44a7fc5d765d3440c38e5101b1979.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EПоток 1 вступает в работу, читает переменную x и переключает контекст на поток 2 (context switch). Затем поток 2 берет значение из x = 2, умножает на 2 и записывает в x = 4. Процессор переключает контекст на поток 1, а в потоке 1, как мы помним, сохранено значение x = 2. В итоге он увеличивает значение на единицу и записывает в x = 3, а значит, на выходе мы получаем 3.\u003C\u002Fp\u003E\u003Cp\u003EОдин поток обогнал другой при переключении контекста, и мы получили непредсказуемый результат. Такое событие называется \u003Cstrong\u003ERace condition\u003C\u002Fstrong\u003E. Как тогда быть уверенным в том, что поток, взявший в работу какие-то данные, выполнит свою работу, перед тем как переключит свой контекст на другой потоку?\u003C\u002Fp\u003E\u003Cp\u003EВот пример:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nfrom threading import Thread\nfrom time import sleep\n\ncounter = 0\n\n\ndef increase(by):\n    global counter\n\n    local_counter = counter\n    local_counter += by\n\n    sleep(0.1)\n\n    counter = local_counter\n    print(f'{counter=}')\n\n\nt1 = Thread(target=increase, args=(10,))\nt2 = Thread(target=increase, args=(20,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПосмотрим на результат:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\ncounter=10\ncounter=20\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВместо 30 получаем 20.\u003C\u002Fp\u003E\u003Cp\u003EНа помощь нам может прийти такое понятие как \u003Cstrong\u003ELock\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003ELock (замок) \u003C\u002Fstrong\u003E– объект, который захватывает поток, и пока поток не освободит (release) Lock, другие потоки не смогут ничего сделать с этими данными, захваченными при помощи замка.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nfrom threading import Thread, Lock\nfrom time import sleep\n\ncounter = 0\n\n\ndef increase(by, lock: Lock):\n    global counter\n\n    lock.acquire()\n\n    local_counter = counter\n    local_counter += by\n\n    sleep(0.1)\n\n    counter = local_counter\n    print(f'{counter=}')\n\n    lock.release()\n\n\nlock = Lock()\n\nt1 = Thread(target=increase, args=(10, lock,))\nt2 = Thread(target=increase, args=(20, lock,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВот теперь как и должно быть:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\ncounter=10\ncounter=30\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНесмотря на то, что \u003Cstrong\u003ELock \u003C\u002Fstrong\u003Eпомогает решить проблему с \u003Cstrong\u003ERace condition\u003C\u002Fstrong\u003E, он может привести к другой сложной ситуации, когда один поток ждет освобождение одного замка, а другой ждет освобождение от первого. Такое ожидание приводит к ситуации взаимного тупика, известного как \u003Cstrong\u003EDeadlock\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nfrom threading import Thread, Lock\nfrom time import sleep\n\na = 5\nb = 10\n\na_lock = Lock()\nb_lock = Lock()\n\n\ndef function_a():\n    global a\n    global b\n\n    a_lock.acquire()\n    print('Функция a, a_lock = заблокирован')\n    sleep(1)\n    b_lock.acquire()\n    print('Функция a, b_lock = заблокирован')\n\n    sleep(1)\n\n    a_lock.release()\n    print('Функция a, a_lock = разблокирован')\n    b_lock.release()\n    print('Функция a, b_lock = разблокирован')\n\n\ndef function_b():\n    global a\n    global b\n\n    b_lock.acquire()\n    print('Функция b, b_lock = заблокирован')\n    a_lock.acquire()\n    print('Функция b, a_lock = заблокирован')\n\n    sleep(1)\n\n    b_lock.release()\n    print('Функция b, b_lock = разблокирован')\n    a_lock.release()\n    print('Функция b, a_lock = разблокирован')\n\n\nt1 = Thread(target=function_a)\nt2 = Thread(target=function_b)\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\n\nprint('Готово')\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ теперь посмотрим результат:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nФункция a, a_lock = заблокирован\nФункция b, b_lock = заблокирован\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНаша программа зависает в ожидании разблокировки, которая никогда не произойдет. Так же \u003Cstrong\u003EDeadlock \u003C\u002Fstrong\u003Eпроизойдет при попытке заблокировать наш \u003Cstrong\u003ELock \u003C\u002Fstrong\u003Eповторно в том же потоке.\u003C\u002Fp\u003E\u003Cp\u003EРешить проблему с \u003Cstrong\u003EDeadlock \u003C\u002Fstrong\u003Eмогут помочь различные механизмы синхронизации потоков. Разберем один из таких примеров – \u003Cstrong\u003ESemaphore (Семафор)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff3e\u002F8dd\u002F685\u002Ff3e8dd685990942bc4bed52863e5ba07.png\" width=\"1920\" height=\"806\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff3e\u002F8dd\u002F685\u002Ff3e8dd685990942bc4bed52863e5ba07.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003Cstrong\u003ESemaphore \u003C\u002Fstrong\u003Eпрост в понимании, если его представить в виде объекта, который ограничивает выполнение блока кода установленным количеством, по умолчанию это 1. При каждом вхождении в блок кода \u003Cstrong\u003ESemaphore\u003C\u002Fstrong\u003E счетчик уменьшается. Если счетчик дошел до 0, все потоки блокируются, и пока поток не освободит семафор, другие будут ждать разрешения подключиться.\u003C\u002Fp\u003E\u003Cp\u003EПосмотрим \u003Cstrong\u003ESemaphore \u003C\u002Fstrong\u003Eна примере реализации очереди из реального кейса.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport datetime\nfrom threading import Semaphore, Thread\nfrom time import sleep\n\ns = Semaphore(3)\n\n\ndef semaphore_func(payload: int):\n    s.acquire()\n    now = datetime.datetime.now().strftime('%H:%M:%S')\n    print(f'{now=}, {payload=}')\n    sleep(2)\n    s.release()\n\n\nthreads = [Thread(target=semaphore_func, args=(i,)) for i in range(7)]\n\nfor t in threads:\n    t.start()\n\nfor t in threads:\n    t.join()\n```\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ результате увидим, что функция выполнялась группами по 3 потока. То есть одновременно не может выполняться кусок кода с блокировкой через \u003Cstrong\u003ESemaphore \u003C\u002Fstrong\u003Eбольше, чем указан в инициализации класса \u003Cstrong\u003ESemaphore\u003C\u002Fstrong\u003E. Видим паузы в 2 секунды между блокировками.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nnow='00:49:51', payload=0\nnow='00:49:51', payload=1\nnow='00:49:51', payload=2\nnow='00:49:53', payload=3\nnow='00:49:53', payload=5\nnow='00:49:53', payload=4\nnow='00:49:55', payload=6\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто удобно использовать, например, в таком виде: если база данных может держать не более 30 соединений, то инстанциируем \u003Cstrong\u003ESemaphore \u003C\u002Fstrong\u003Eсо значением 30. Блокируем, когда поднимаем соединение и разблокируем, когда освобождаем.\u003C\u002Fp\u003E\u003Cp\u003EЕсть несколько способов синхронизации потоков, которые подходят для тех или иных ситуации. Примеры можно посмотреть \u003Ca href=\"https:\u002F\u002Fdocs.python.org\u002F3\u002Flibrary\u002Fasyncio-sync.html\"\u003E\u003Cu\u003Eв документации\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EТеперь поговорим об освобождении GIL.\u003C\u002Fp\u003E\u003Cp\u003ECPython управляет памятью с помощью подсчета ссылок. То есть для каждого объекта Python подсчитывается, сколько на него указывается ссылок с других объектов, использующих его в данный момент. При добавлении ссылки счетчик увеличивается, при удалении ссылки счетчик уменьшается. А когда счетчик ссылок становится 0 — это означает, что объект больше не нужен, и его можно удалить из памяти.\u003C\u002Fp\u003E\u003Cp\u003EСледовательно, если не будет GIL, который запрещает Python процессу выполнять более одной команды байт-кода в каждый момент времени, то при подсчете ссылок может случиться Race-condition, с подсчетом ссылок на объекты, как это было в примере с переменными выше.\u003C\u002Fp\u003E\u003Cp\u003EИтак, раз GIL запрещает одновременное выполнение Python кода, из этого следует, что он высвобождается, когда Python код не выполняется. Когда мы ждем, например, пока считается файл с диска или придет ответ на запрос к сайту. Так как в этом случае низкоуровневые системные вызовы работают за пределами Python кода и среды выполнения, и код операционной системы не взаимодействует напрямую с объектами Python, соответственно, они не увеличивают и не уменьшают счетчик ссылок. GIL захватывается снова, когда данные переносятся в объект Python.\u003C\u002Fp\u003E\u003Cp\u003EСтало быть, если мы сделаем библиотеку, даже с CPU-bound нагрузкой, где мы не взаимодействуем с объектами Python (словарями, списками, целыми числами и т. д.) или большая часть библиотеки не взаимодействует, то мы можем освободить GIL. Например, библиотеки hashlib и NumPy выполняют расчеты на чистом C и освобождают GIL.\u003C\u002Fp\u003E\u003Cp\u003Etime.sleep() — реализация этой функции освобождает GIL и выполняется на уровне системы и работает вне кода Python.\u003C\u002Fp\u003E\u003Cp\u003EКак видите, в многопоточности существует огромное количество нюансов и проблем. В реальных больших программах будет непросто понять, где происходит ошибка. Рассмотрим, как можно распараллелить выполнение программ. В этом поможет асинхронность.\u003C\u002Fp\u003E\u003Ch2\u003EАсинхронность\u003C\u002Fh2\u003E\u003Cp\u003EДля того чтобы лучше понять асинхронность, окунемся в далекий 1992 год. Тогда была выпущена операционная система Windows 3.1 которая использовала кооперативную многозадачность.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EКооперативная многозадачность \u003C\u002Fstrong\u003E— это тип многозадачности, при котором фоновые задачи выполняются только во время простоя основного процесса и только в том случае, если на это получено разрешение основного процесса.\u003C\u002Fp\u003E\u003Cp\u003EТо есть время, когда исполняемая программа управляет передачей управления другому процессу и передачей процессорного времени.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EНедостатком \u003C\u002Fstrong\u003Eтакого исполнения является то, что если одна задача зависла. Зависает вся система. \u003C\u002Fp\u003E\u003Cp\u003EА вот \u003Cstrong\u003Eпреимущества \u003C\u002Fstrong\u003Eтакого решения: разработчик программы отдает управление тогда, когда он посчитает это нужным.\u003C\u002Fp\u003E\u003Cp\u003EТеперь мы подобрались к понятию асинхронного программирования.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EАсинхронное программирование \u003C\u002Fstrong\u003E— выполнение программы в неблокирующем режиме системного вызова, что позволяет потоку программы продолжить работу.\u003C\u002Fp\u003E\u003Cp\u003EБлагодаря асинхронному программированию в одном процессе и даже потоке мы можем выполнять сразу множество задач. Как же это происходит?\u003C\u002Fp\u003E\u003Cp\u003EВ реальном программировании, а особенно в web-разработке мы очень часто чего-то ждём и не делаем полезной работы. Вот несколько примеров:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОтправили запрос на сторонний ресурс и ждем ответа.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтправили запрос в базу данных и ждем результата запроса.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЧитаем или записываем файл на диск.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИ так далее.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПолучается что мы ждем, ждем и ждем. А в это время наша программа могла бы выполнить множество полезной нагрузки. И мы как разработчики ПО точно знаем, где мы будем ожидать. Ничего не напоминает? Да! Похоже на \u003Cstrong\u003Eкооперативную многозадачность\u003C\u002Fstrong\u003E, но только не на уровне операционной системы, а на уровне процесса.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F598\u002F9c4\u002F536\u002F5989c4536adbbd89b147300832920135.png\" width=\"1920\" height=\"806\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F598\u002F9c4\u002F536\u002F5989c4536adbbd89b147300832920135.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EНа рисунке видно, что периодов ожидания много. А что будет если во время ожидания мы будем выполнять полезную работу?\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F730\u002Fa2d\u002Fdad\u002F730a2ddad3fcddc5fc984280d86c0075.png\" width=\"1920\" height=\"806\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F730\u002Fa2d\u002Fdad\u002F730a2ddad3fcddc5fc984280d86c0075.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EКак видно на рисунке, в моменты ожидания мы выполняем уже две задачи за то же самое время. Чем быстрее мы выполняем работу и чем дольше мы ожидаем, тем больше задач мы можем сделать за одно и то же время.\u003C\u002Fp\u003E\u003Cp\u003EДля реализации такого поведения асинхронности есть несколько подходов:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EРеализация на основе коллбэков.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EРеализация на основе корутин.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EОба подхода имеют место. Например, мощный фреймворк TORNADO реализован именно на основе коллбэков. \u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E\u003Cbr\u002F\u003EУ этого подхода есть ряд недостатков:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКод перестает выглядеть как синхронный, что усложняет отладку.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАд коллбэков, в котором будет сложно разобраться. Просто погуглите фразу “callback hell”.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EЕсли после этих минусов желание попробовать ещё осталось, то можно в подходе легко разобраться.\u003C\u002Fp\u003E\u003Cp\u003EА вот подход на основе корутин мы разберем более глубоко. У него также есть ряд преимуществ и недостатков:\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПлюсы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАсинхронный код выглядит как синхронный.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНет проблем с общей памятью, и избавляемся от синхронизаций.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе нужно переключать контекст между задачами, что экономит ресурсы нашего компьютера.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EТеперь нам не нужны коллбэки, но их также можно использовать.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EМинусы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЧуть более сложный подход для понимания.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ Python есть ряд библиотек, которые позволяют работать с асинхронностью:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003Easyncio \u003C\u002Fstrong\u003E— основная библиотека для работы с асинхронным программированием,\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003Eaiohttp\u003C\u002Fstrong\u003E — для асинхронной работы с запросами,\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003Eaiofiles\u003C\u002Fstrong\u003E — для работы с файловой системой.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКак вы наверное заметили, у библиотек есть префикс \u003Cstrong\u003Eaio (asynchronous input output, асинхронный ввод-вывод).\u003C\u002Fstrong\u003E Тут как раз решается проблема ожидания. Такие задачи называют \u003Cstrong\u003EIO bound\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003EРассмотрим термины, которые нам помогут во всём разобраться.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcb6\u002F011\u002Fc84\u002Fcb6011c843e061bde93b3ff7011e0b2e.png\" width=\"3632\" height=\"1609\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcb6\u002F011\u002Fc84\u002Fcb6011c843e061bde93b3ff7011e0b2e.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003Cstrong\u003EEvent loop (цикл событий) \u003C\u002Fstrong\u003E— ядро каждого приложения asyncio. Циклы событий запускают асинхронные задачи и обратные вызовы, выполняют операции сетевого ввода-вывода и запускают подпроцессы. Официальную документацию можно прочесть \u003Ca href=\"https:\u002F\u002Fdocs.python.org\u002Fdev\u002Flibrary\u002Fasyncio-eventloop.html\"\u003E\u003Cu\u003Eтут\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.python.org\u002F3.5\u002Flibrary\u002Fasyncio-task.html#coroutines\"\u003E\u003Cstrong\u003E\u003Cu\u003EКорутины\u003C\u002Fu\u003E\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E — это специальные функции, которые запускаются, используя цикл событий. У них есть особенность — они говорят, когда они будут ждать и передают управление обратно, чтобы другая задача могла выполняться во время ожидания.\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.python.org\u002F3.5\u002Flibrary\u002Fasyncio-task.html#future\"\u003E\u003Cstrong\u003E\u003Cu\u003EФутуры\u003C\u002Fu\u003E\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E — это определение обычно воспринимается тяжелее всего, но я постараюсь объяснить как можно проще. Это объект, в котором хранится результат и состояние задачи: \u003C\u002Fp\u003E\u003Cp\u003E+ ожидание (pending) \u003C\u002Fp\u003E\u003Cp\u003E+ выполнение (running) \u003C\u002Fp\u003E\u003Cp\u003E+ выполнено (done) \u003C\u002Fp\u003E\u003Cp\u003E+ отменено (cancelled)\u003C\u002Fp\u003E\u003Cp\u003EТо есть в процессе работы мы можем управлять задачами в зависимости от футуры (статус\u002Fрезультат) задачи.\u003C\u002Fp\u003E\u003Cp\u003EКорутины могут быть реализованы с использованием генераторов или async\u002Fawait. Мы выбираем второй вариант как более лаконичный.\u003C\u002Fp\u003E\u003Cp\u003EПосмотрим, как это выглядит в коде. \u003C\u002Fp\u003E\u003Cp\u003EСоздадим первую корутину:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждем\n    print('Переключение контекста в функцию hello')\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь у нас есть асинхронная функция. Научимся теперь её запускать. Первое, что хочется сделать — вызвать её как обычную функцию. Давайте попробуем:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n\nhello()\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри выполнении ничего не произошло. А вот наш друг интерпретатор выдал предупреждение.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nRuntimeWarning: coroutine 'hello' was never awaited\n  hello()\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТут из сообщения становится понятно, что при вызове таким образом асинхронной функции она превращается в асинхронную корутину.\u003C\u002Fp\u003E\u003Cp\u003EКак же можно запустить корутину?\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EИз другой корутины.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОбернуть в задачу.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЗапустить через метод asyncio.run и  run_until_complete из цикла событий.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n\n\nasyncio.run(hello())\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ получили результат, который ожидали.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nЗапуск функции hello\nПереключение контекста в функцию hello\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВызов метода \u003Cstrong\u003Easyncio.run(hello()) \u003C\u002Fstrong\u003Eпринимает корутину, которую необходимо выполнить, открывает цикл событий, выполняет корутину и закрывает цикл событий.\u003C\u002Fp\u003E\u003Cp\u003EЧто делать, если необходимо запустить две задачи конкурентно?\u003C\u002Fp\u003E\u003Cp\u003EЭто поможет нам сделать \u003Cstrong\u003Easyncio.gather\u003C\u002Fstrong\u003E, но раз функция\u003Cstrong\u003E asyncio.run\u003C\u002Fstrong\u003E принимает только одну корутину, создадим новую корутину, которая будет запускать конкурентно несколько задач.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n\n\nasync def starter():\n    await asyncio.gather(hello(), hello())\n\n\nasyncio.run(starter())\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ получаем тот результат, который ожидали.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nЗапуск функции hello\nЗапуск функции hello\nПереключение контекста в функцию hello\nПереключение контекста в функцию hello\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВремя выполнения около 5 секунд. Если бы две функции выполнялись синхронно, то время выполнения составило около 10 секунд.\u003C\u002Fp\u003E\u003Cp\u003EА если нам необходимо выполнить 10 тысяч раз, сколько времени это займёт? Видоизменяем код:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\nimport time\n\nstart = time.time() ## точка отсчета времени\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n\n\nasync def starter():\n    await asyncio.gather(*[hello() for i in range(10000)])\n\nasyncio.run(starter())\n\nend = time.time() - start\nprint(end)\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПолучаем результат. Посмотрим на вывод последних нескольких строк, которые нам говорят, сколько минут выполнялся код.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\n…\nПереключение контекста в функцию hello\nПереключение контекста в функцию hello\nПереключение контекста в функцию hello\n5.27926778793335\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНеплохо. Чуть больше тех же самых 5 секунд. \u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EЧто же это значит?\u003C\u002Fstrong\u003E Представьте, что запрос на сторонний сайт занимает порядка 5 секунд. И нам необходимо получить результат тех же самых 10000 запросов. Используя асинхронное программирование, 10 тысяч запросов сеть будут выполняться чуть больше 5 секунд. Правда, здорово?\u003C\u002Fp\u003E\u003Cp\u003EНо мы пойдем дальше и будем уже более гибко и детально работать с асинхронным выполнением:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n\n\nasync def bye():\n    print('Запуск функции bye')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию byе')\n\n\nioloop = asyncio.get_event_loop()\ntasks = [ioloop.create_task(hello()), ioloop.create_task(bye())]\ntasks_for_wait = asyncio.wait(tasks)\nioloop.run_until_complete(tasks_for_wait)\nioloop.close()\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ этом примере мы более гибко управляем циклом событий. Сначала получаем\u002Fсоздаем основной цикл событий. Затем создаем задачи и объединяем их запускаем на выполнение, пока не завершится. Затем уже закрываем цикл событий. Нужно помнить, что порядок выполнения задач при конкурентном выполнении мы не можем гарантировать, и необходимо разрабатывать приложения с учетом этой особенности.\u003C\u002Fp\u003E\u003Cp\u003EТеперь давайте попробуем управлять выполнениями задач и рассмотрим код ниже:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"python\"\u003E```\nimport asyncio\n\n\nasync def hello():\n    print('Запуск функции hello')\n    await asyncio.sleep(5)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию hello')\n    return 'Выполнена функция hello'\n\n\nasync def bye():\n    print('Запуск функции bye')\n    await asyncio.sleep(2)  # Отдаем управление обратно в Event loop пока ждём\n    print('Переключение контекста в функцию byе')\n    return 'Выполнена функция bye'\n\n\nasync def starter(ioloop):\n    tasks = [ioloop.create_task(hello()), ioloop.create_task(bye())]\n    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n    result = done.pop().result()\n\n    for pending_future in pending:\n        pending_future.cancel()\n\n    print(result)\n\n\nioloop = asyncio.get_event_loop()\nioloop.run_until_complete(starter(ioloop))\nioloop.close()\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EРезультат будет таким:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003E```\nЗапуск функции hello\nЗапуск функции bye\nПереключение контекста в функцию byе\nВыполнена функция bye\n```\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь только представьте, какие возможности у нас открылись! Например, мы можем запрашивать курсы валют сразу с нескольких ресурсов, и принимать результат того, который быстрее ответит. Чувствуете, как растет скорость и устойчивость приложения?\u003C\u002Fp\u003E\u003Cp\u003EИли ещё такой пример. Мы можем динамически добавлять новые задачи, когда одна из задач выполнена. Например, парсить сайт в 20 задач. Только в этом случае добавляем к футурам в статусе \u003Cstrong\u003Epending \u003C\u002Fstrong\u003Eновую задачу.\u003C\u002Fp\u003E\u003Cp\u003EА самое приятное — наши асинхронные задачи выглядят как синхронные:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EРаботая в один поток, можно делать больше работы;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EУдобная отладка;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНет проблем с блокировками;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EМожем использовать обратные вызовы (коллбэки) и отложенные обратные вызовы вдобавок к нашему асинхронному коду. Для этого посмотрите на методы цикла событий \u003Cstrong\u003Ecall_soon, call_later, call_at\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EДля работы с конкурентностью есть различные библиотеки, которые решают самые востребованные задачи IO:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003Eaiohttp\u003C\u002Fstrong\u003E — работа с HTTP запросами;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003Eaiofiles\u003C\u002Fstrong\u003E — работа с файлами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EМы рассмотрели темы асинхронного и параллельного программирования. Теперь осталось дело за малым, опробовать всё это на практике. \u003C\u002Fp\u003E\u003Ch2\u003EИтого\u003C\u002Fh2\u003E\u003Ch4\u003EОтдельные процессы\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cstrong\u003EПлюсы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E+ Работают параллельно.\u003C\u002Fp\u003E\u003Cp\u003E+ Используют все ресурсы ядра процессора.\u003C\u002Fp\u003E\u003Cp\u003E+ Можно загрузить все ядра процессора.\u003C\u002Fp\u003E\u003Cp\u003E+ Изолированная память.\u003C\u002Fp\u003E\u003Cp\u003E+ Независимые системные процессы.\u003C\u002Fp\u003E\u003Cp\u003E+ Подходит для CPU bound операций.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EМинусы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЕсли необходимо использовать общую память, то необходимо синхронизировать, так как нет общих переменных.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EТребуют больших ресурсов, так как запускают отдельный интерпретатор.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EИспользуем там, где обрабатываемые данные не зависят от других процессов и данных. Например:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E\t+ Расчет нейронных сетей.\u003C\u002Fp\u003E\u003Cp\u003E\t+ Обработка изолированных фотографий.\u003C\u002Fp\u003E\u003Cp\u003E\t+ Архивирование изолированных файлов.\u003C\u002Fp\u003E\u003Cp\u003E\t+ Конвертация форматов файлов.\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch4\u003EОтдельные потоки\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cstrong\u003EПлюсы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E+ Работают параллельно.\u003C\u002Fp\u003E\u003Cp\u003E+ Используют немного памяти.\u003C\u002Fp\u003E\u003Cp\u003E+ Общая память.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EМинусы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОдновременный доступ к памяти может приводить к конфликтам.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСложный код.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EИспользуем там, где код много раз ожидает, пока выполнится задача. Например:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E+ Работа с сетью.\u003C\u002Fp\u003E\u003Ch4\u003EАсинхронность\u003C\u002Fh4\u003E\u003Cp\u003E\u003Cstrong\u003EПлюсы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E+ Работает в одном процессе и в одном потоке.\u003C\u002Fp\u003E\u003Cp\u003E+ Экономное использование памяти.\u003C\u002Fp\u003E\u003Cp\u003E+ Подходит для I\u002FO bound операций.\u003C\u002Fp\u003E\u003Cp\u003E+ Работает конкурентно.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EМинусы:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EСложность отладки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ECPU bound операции блокируют все задачи.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EИспользуем там, где код много раз ожидает. Например:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E+ Работа с сетью.\u003C\u002Fp\u003E\u003Cp\u003E+ Работа с файловой системой.\u003C\u002Fp\u003E\u003Cp\u003EОсновываясь на конкретных плюсах и минусах, нам становится легче выбирать подход и грамотно использовать процессорное время и память. Хотя Python является мультипарадигменным языком общего назначения, на нем можно писать практически любые программы, используя любой подход. Но особенно приятно, когда ваш веб-сервис может держать в сотню раз больше соединений или отрабатывать запросы в 8 раз быстрее, обходясь меньшим количеством памяти.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EСпасибо за внимание! Надеемся, что этот материал был полезен для вас. \u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EАвторские материалы для разработчиков мы также публикуем в наших соцсетях – \u003Ca href=\"https:\u002F\u002Fvk.com\u002Fsimbirsoft_team\"\u003E\u003Cu\u003EВК\u003C\u002Fu\u003E\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Ft.me\u002Fsimbirsoft_dev\"\u003E\u003Cu\u003ETelegram\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"python"},{"titleHtml":"многопоточность"},{"titleHtml":"многопоточное программирование"},{"titleHtml":"асинхронность"},{"titleHtml":"асинхронное программирование"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6fc\u002F723\u002Fdad\u002F6fc723dad2ebed67fd6b8d32b8830375.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6fc\u002F723\u002Fdad\u002F6fc723dad2ebed67fd6b8d32b8830375.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fsimbirsoft\\\u002Farticles\\\u002F701020\\\u002F\"},\"headline\":\"Как работать с процессами и потоками в Python\",\"datePublished\":\"2022-11-23T10:50:57+03:00\",\"dateModified\":\"2022-12-23T13:50:22+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"SSul\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fsimbirsoft\\\u002Farticles\\\u002F701020\\\u002F#post-content-body\",\"about\":[\"c_simbirsoft\",\"h_python\",\"h_programming\",\"h_parallel_programming\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F701020\\\u002Fc5bdb05a7b1e08280e2ccf035ce3ab68\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F10d\\\u002F612\\\u002F12b\\\u002F10d61212b1a6e5341d4b66901be879c5.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F29d\\\u002Fd70\\\u002Fe74\\\u002F29dd70e74d9999d9cfc222bb23403877.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F1c9\\\u002F7c9\\\u002Fbbe\\\u002F1c97c9bbe6dc9eee3e74c842bd921e9b.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fb2b\\\u002F44a\\\u002F7fc\\\u002Fb2b44a7fc5d765d3440c38e5101b1979.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Ff3e\\\u002F8dd\\\u002F685\\\u002Ff3e8dd685990942bc4bed52863e5ba07.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F598\\\u002F9c4\\\u002F536\\\u002F5989c4536adbbd89b147300832920135.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F730\\\u002Fa2d\\\u002Fdad\\\u002F730a2ddad3fcddc5fc984280d86c0075.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fcb6\\\u002F011\\\u002Fc84\\\u002Fcb6011c843e061bde93b3ff7011e0b2e.png\"]}","metaDescription":"Раскрывать тему параллельного или асинхронного программирования непросто. Во-первых, она перегружена терминологией и трудна для понимания. Как правило, тонкости и особенности работы с языками...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"readingTime":16,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":""}},"companies":{"companyRefs":{"simbirsoft":{"alias":"simbirsoft","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fda7\u002Ffca\u002Fca8\u002Fda7fcaca8b145a0f223a8d22b6097f5b.png","titleHtml":"SimbirSoft","descriptionHtml":"Лидер в разработке современных ИТ-решений на заказ","relatedData":null,"statistics":{"subscribersCount":615,"rating":55.67,"invest":null,"postsCount":204,"threadsCount":0,"newsCount":17,"vacanciesCount":3,"employeesCount":13,"careerRating":null},"foundationDate":{"year":"2001","month":"02","day":"21"},"location":{"city":{"id":"447159","title":"Москва"},"region":{"id":"1885","title":"Москва и Московская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"http:\u002F\u002Fwww.simbirsoft.com\u002Fruru\u002F","staffNumber":"1 001–5 000 человек","registrationDate":"2015-11-02T08:59:02+00:00","representativeUser":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fs.simbirsoft.com\u002F4LKj","siteTitle":"Разработка программного обеспечения на заказ - SimbirSoft","favicon":"https:\u002F\u002Fwww.simbirsoft.com\u002Ffavicon.png?utm_source=habr&utm_medium=social&utm_campaign=habr-profile"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fsimbirsoft","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?8"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsimbirsoft_dev","siteTitle":"Telegram: Contact @simbirsoft_dev","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsimbirsoft_depthdev","siteTitle":"Telegram: Contact @simbirsoft_depthdev","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fsimbirsoft_team","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?8"}],"settings":{"analyticsSettings":[{"type":"ga","trackingId":"UA-39902036-15"}],"branding":null,"status":"active","isStartup":false,"hasActivePolls":false},"metadata":{"titleHtml":"SimbirSoft, Москва - Лидер в разработке современных ИТ-решений на заказ с 21 февраля 2001 г.","title":"SimbirSoft, Москва - Лидер в разработке современных ИТ-решений на заказ с 21 февраля 2001 г.","keywords":["Программирование","Управление разработкой","Анализ и проектирование систем","Веб-разработка","Тестирование IT-систем","тестирование","qa","frontend","javascript","android","мобильная разработка","разработка","архитектура","управление проектами","java","simbirsoft","практикум","ios","автоматизация тестирования","митап","аналитика","react","swift","sdet","блог компании simbirsoft"],"descriptionHtml":"204 статьи от авторов компании SimbirSoft","description":"204 статьи от авторов компании SimbirSoft"},"aDeskSettings":null,"careerAlias":"simbirsoft"}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"unreadCount":0,"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"flows":{"updates":{"countNewPostsBySubscription":null,"countNewThreadsBySubscription":null,"countNewNewsBySubscription":null,"countNewPostsAll":72,"countNewNewsAll":50,"countNewThreadsAll":11},"flows":[{"alias":"develop","id":"1","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"alias":"admin","id":"6","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"alias":"design","id":"2","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"alias":"management","id":"3","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"alias":"marketing","id":"4","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"alias":"popsci","id":"7","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}]},"global":{"isPwa":false,"device":"mobile","isHabrCom":true},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"search":null,"query":{},"pathname":null,"path":null,"href":""}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null},"modal":{"modals":[]},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":false,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-572","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa3e\u002F6a7\u002Fe78\u002Fa3e6a7e78ce63ddd9d9c63ab82172127.png","title":"Хабр","link":null},"title":"Полезная подборка о собеседованиях","lang":"ru","startTime":"2023-09-19T11:03:00+03:00","finishTime":"2023-09-26T11:03:58+03:00","slides":[{"id":"story-572_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e4\u002F33a\u002F558\u002F2e433a558baea53a89c5b537d3a71664.jpg","button":null},{"id":"story-572_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F345\u002F8b0\u002F48e\u002F3458b048e7054e77bce40a3580185c10.jpg","button":{"title":"Шпаргалки","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_01","colorType":"light"}},{"id":"story-572_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F09c\u002F35d\u002F449\u002F09c35d4496eb21c671360470b8890180.jpg","button":{"title":"Классификация","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_02","colorType":"light"}},{"id":"story-572_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F297\u002F7a8\u002F163\u002F2977a8163278618416ade79ff5c6ea2a.jpg","button":{"title":"Как надо и не надо","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_03","colorType":"dark"}},{"id":"story-572_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F904\u002F9d9\u002Fef6\u002F9049d9ef6a1bb9fe045ba5bfce8edbc8.jpg","button":{"title":"Лайфхаки","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_04","colorType":"light"}},{"id":"story-572_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F040\u002F905\u002F11d\u002F04090511dbd4163db7021937a0959cb3.jpg","button":{"title":"Другой взгляд","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_05","colorType":"light"}},{"id":"story-572_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fec1\u002Fdee\u002F2d7\u002Fec1dee2d718c797799a11269c9525bf2.jpg","button":{"title":"22 вопроса","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_06","colorType":"light"}},{"id":"story-572_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F281\u002Fdec\u002F5b6\u002F281dec5b601227d654c95aa3a7c0f6e1.jpg","button":{"title":"Руководство","link":"https:\u002F\u002Fu.habr.com\u002Fsobes_07","colorType":"light"}}]},{"id":"story-570","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1d4\u002F93f\u002F3d6\u002F1d493f3d644d0aa726226075092247b7.png","title":"Хабр Карьера","link":"https:\u002F\u002Fu.habr.com\u002FgSfLc"},"title":"Разбор резюме дизайнеров","lang":"ru","startTime":"2023-09-18T13:51:00+03:00","finishTime":"2023-09-25T13:51:23+03:00","slides":[{"id":"story-570_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbbe\u002Ffdd\u002F8fb\u002Fbbefdd8fb55293afce73b16655fc8648.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FgSfLc","colorType":"dark"}},{"id":"story-570_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb31\u002Fa17\u002Fef0\u002Fb31a17ef0589e702a78bfff96fb7fd6f.png","button":null},{"id":"story-570_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4e3\u002Fc9a\u002F01e\u002F4e3c9a01e39179e3ded6398463692a29.png","button":{"title":"Смотреть","link":"https:\u002F\u002Fu.habr.com\u002FgSfLc","colorType":"dark"}}]},{"id":"story-564","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7ed\u002F545\u002F30a\u002F7ed54530a1eda71e69f2d8ee514fdbe2.png","title":"Хабр","link":null},"title":"Учиться хорошо","lang":"ru","startTime":"2023-09-11T11:03:00+03:00","finishTime":"2023-09-30T11:03:00+03:00","slides":[{"id":"story-564_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb9f\u002F48d\u002F9a5\u002Fb9f48d9a5b00edc5fc546fdb7ac11b52.jpg","button":null},{"id":"story-564_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa32\u002Fe3c\u002F46b\u002Fa32e3c46bc1ce055623fb552772d62f2.jpg","button":{"title":"Весь список","link":"https:\u002F\u002Fu.habr.com\u002Fst_u401","colorType":"light"}},{"id":"story-564_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F599\u002F4e9\u002F669\u002F5994e9669a88d610b816f7ae643ff100.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fst_u402","colorType":"light"}},{"id":"story-564_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F269\u002Ff24\u002F76c\u002F269f2476c9ca409be4e1a9c0345cbcde.jpg","button":{"title":"Мнение","link":"https:\u002F\u002Fu.habr.com\u002Fst_u406","colorType":"light"}},{"id":"story-564_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fafe\u002F87e\u002F596\u002Fafe87e59674cc171e934aa8bcfa0442f.jpg","button":{"title":"Включить нитро","link":"https:\u002F\u002Fu.habr.com\u002Fst_u404","colorType":"light"}},{"id":"story-564_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faab\u002Fd34\u002F18d\u002Faabd3418da7eaad16d455a3209a807b8.jpg","button":{"title":"Разоблачение","link":"https:\u002F\u002Fu.habr.com\u002Fst_u405","colorType":"light"}},{"id":"story-564_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F276\u002F3ac\u002F5ab\u002F2763ac5ab0e3be3e3e1fee41304f2a96.jpg","button":{"title":"Найти ментора","link":"https:\u002F\u002Fu.habr.com\u002Fst_u403","colorType":"light"}},{"id":"story-564_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc68\u002Fee5\u002F276\u002Fc68ee52767d0ac68ccd3922dd900fc01.jpg","button":{"title":"Гайд по сайту","link":"https:\u002F\u002Fu.habr.com\u002Fst_u407","colorType":"light"}}]},{"id":"story-560","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fee6\u002F525\u002Fc95\u002Fee6525c95fdb9ce7ad3303bd4ac9bab9.png","title":"YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe"},"title":"Золотая рыбка, хочу, чтоб у меня все было","lang":"ru","startTime":"2023-09-08T10:00:00+03:00","finishTime":"2023-09-22T23:59:00+03:00","slides":[{"id":"story-560_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F61e\u002Fe27\u002Fa67\u002F61ee27a67b3485e7a145309b7b52e542.jpg","button":null},{"id":"story-560_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fae0\u002Fda1\u002Fad2\u002Fae0da1ad268ee46d22c9946e395a158e.jpg","button":null},{"id":"story-560_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc9f\u002Feba\u002Fb7b\u002Fc9febab7b12e9df9821a490448b81a07.jpg","button":{"title":"Вакансии YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe","colorType":"dark"}},{"id":"story-560_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1c6\u002F348\u002F72f\u002F1c634872ff69157d302bd25a74668a3c.jpg","button":{"title":"Вакансии YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe","colorType":"light"}},{"id":"story-560_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6f9\u002Ffa3\u002Fa1a\u002F6f9fa3a1a0fb6176d01d783c3f919fb5.jpg","button":null},{"id":"story-560_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc40\u002F9c3\u002F4ba\u002Fc409c34bafc14d84cbdabe92caa258ba.jpg","button":null},{"id":"story-560_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5cd\u002F6a3\u002Fe97\u002F5cd6a3e97b1dd11867a79ea82b888627.jpg","button":{"title":"Вакансии YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe","colorType":"dark"}},{"id":"story-560_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F18d\u002F73c\u002Fb43\u002F18d73cb43863a59bf477f0b4691acd06.jpg","button":{"title":"Вакансии YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe","colorType":"dark"}},{"id":"story-560_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F544\u002Fd0a\u002F874\u002F544d0a87440e5ccf709236200abe8362.jpg","button":{"title":"Вакансии YADRO","link":"https:\u002F\u002Fu.habr.com\u002FYADRO\u002F?erid=4CQwVszH9pUkpjxWUXe","colorType":"light"}},{"id":"story-560_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe3c\u002F6bb\u002F262\u002Fe3c6bb262c35afbf5b95dd8894a4c5d9.jpg","button":null}]},{"id":"story-552","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F310\u002Fb6d\u002F097\u002F310b6d09710575fad755fc8ed317c7ec.png","title":"Хабр","link":"https:\u002F\u002Fu.habr.com\u002Fcalendar_story_2"},"title":"Перевернуть календарь и добавить событие","lang":"ru","startTime":"2023-08-31T10:39:00+03:00","finishTime":"2023-09-30T10:39:00+03:00","slides":[{"id":"story-552_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffd3\u002F1a4\u002F6ab\u002Ffd31a46abecfbc6f654e64a66cb66260.jpg","button":{"title":"Прямо сюда","link":"https:\u002F\u002Fu.habr.com\u002F0RBBA","colorType":"dark"}},{"id":"story-552_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffef\u002F3e3\u002Fb5d\u002Ffef3e3b5d8379c976167169334348272.jpg","button":{"title":"Разместить событие","link":"https:\u002F\u002Fu.habr.com\u002F0RBBA","colorType":"light"}},{"id":"story-552_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8b9\u002Fea9\u002F638\u002F8b9ea9638d36013b31e365ec79b96d2d.jpg","button":{"title":"Тык","link":"https:\u002F\u002Fu.habr.com\u002F0RBBA","colorType":"dark"}}]},{"id":"story-456","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffeb\u002F4ac\u002Fe80\u002Ffeb4ace80a4d66edf300ba9912e8d9e7.png","title":"Хабр","link":"https:\u002F\u002Fu.habr.com\u002Fpromotarif_main"},"title":"Как взлететь к звёздам с «Промо»","lang":"ru","startTime":"2023-07-19T10:42:00+03:00","finishTime":"2023-09-30T23:59:00+03:00","slides":[{"id":"story-456_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe6d\u002F3d3\u002F331\u002Fe6d3d3331288c63df959a620d46ed475.jpg","button":null},{"id":"story-456_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6c7\u002Fb96\u002F7c4\u002F6c7b967c4b875c344b5fb822688da645.jpg","button":null},{"id":"story-456_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F70d\u002Fafd\u002F94c\u002F70dafd94c1dadf8f7b1b04988f841c35.jpg","button":{"title":"Что такое «Промо»","link":"https:\u002F\u002Fu.habr.com\u002Fpromotarif_in","colorType":"light"}},{"id":"story-456_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4aa\u002F184\u002F0d3\u002F4aa1840d3c46d983a64e0d93d2807209.jpg","button":{"title":"Что такое «Промо»","link":"https:\u002F\u002Fu.habr.com\u002Fpromotarif_in","colorType":"light"}},{"id":"story-456_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fea9\u002Fc7f\u002Fe78\u002Fea9c7fe785bbc519e32b2e0e319a39d2.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002Fpromotarif_in","colorType":"light"}},{"id":"story-456_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fad8\u002F06e\u002Fa40\u002Fad806ea40cdeec78ab6ff06533bb0028.jpg","button":null},{"id":"story-456_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa40\u002Ff50\u002F993\u002Fa40f509932422a1b4325e2d935215770.jpg","button":{"title":"Ключ на старт!","link":"https:\u002F\u002Fu.habr.com\u002Fpromotarif_in","colorType":"light"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"events":[{"id":"events_40","titleHtml":"Неделя аналитиков на Хабр Карьере","startDay":"2023-09-18","finishDay":"2023-09-24","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fte\u002F28\u002Fdo\u002Fte28doaa_hyyc_pmkmwg13zfmss.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Ff5E45","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EЗапускаем вторую Неделю аналитиков в&#160;этом году. Приходите искать работу или, как минимум, проводить время с&#160;пользой. \u003C\u002Fp\u003E\u003Cp\u003EКак все устроено: компании рассказывают о&#160;себе в&#160;формате коротких видеопитчей и&#160;делятся открытыми вакансиями в&#160;аналитике, а&#160;участники недели смотрят эти питчи, голосуют за&#160;лучший, нажимая на&#160;кнопку &#171;Хочу тут работать&#187;, и&#160;откликаются на&#160;понравившиеся вакансии. В&#160;течение недели встречаемся на&#160;IT-митапах, обсуждаем проекты, технологии, тренды и&#160;отвечаем на&#160;ваши вопросы.\u003C\u002Fp\u003E\u003Cp xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EРегистрируйтесь, чтобы ничего не&#160;пропустить! И&#160;следите за&#160;письмами&#160;&#8212; на&#160;старте Недели мы&#160;пришлем кодовую фразу для откликов на&#160;вакансии (с&#160;ней ребята из&#160;компаний пообещали отвечать быстрее).\u003C\u002Fp\u003E\u003Cbr \u002F\u003E"},{"id":"events_39","titleHtml":"SmartDev","startDay":"2023-09-21","finishDay":"2023-09-21","startTime":"10:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fvl\u002Fkf\u002Fhv\u002Fvlkfhvpscozj_4eog07w9eb0fow.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002FNnS8w","geo":["Москва"],"isOnline":true,"descriptionHtml":"\u003Cp\u003EСбер организует технологическую конференцию SmartDev 2023 для разработчиков, инженеров, аналитиков и&nbsp;других представителей техносообщества, которая пройдёт 21&nbsp;сентября в&nbsp;московском кинотеатре &laquo;Октябрь&raquo;.\u003C\u002Fp\u003E\u003Cp\u003EВ&nbsp;этом году на&nbsp;одной площадке соберутся ведущие инженеры и&nbsp;разработчики из&nbsp;Сбера, VK, Яндекса, Kaspersky и&nbsp;других компаний, чтобы обменяться опытом создания лучших в&nbsp;мире технологических решений.\u003C\u002Fp\u003E\u003Cp\u003EУчастники конференции смогут задать вопросы создателям нашумевших проектов Сбера&nbsp;&mdash; сервиса GigaChat и&nbsp;нейросети Kandinsky,&nbsp;&mdash; а&nbsp;также впервые в&nbsp;России услышать выступление генерального директора Gitee, китайского аналога GitHub. Кроме того, Сбер анонсирует планы развития существующих технологических сервисов и&nbsp;запуска новых.\u003C\u002Fp\u003E\u003Cp\u003EНа&nbsp;мероприятии ИТ-эксперты выступят в&nbsp;шести треках: машинное обучение и&nbsp;искусственный интеллект, архитектура, методология и&nbsp;инструменты разработки программного обеспечения, технологии хранения больших данных, безопасность, а&nbsp;также стратегия и&nbsp;инновации.\u003C\u002Fp\u003E"},{"id":"event_35","titleHtml":"Yandex Scale","startDay":"2023-09-25","finishDay":"2023-09-26","startTime":"17:00","finishTime":"18:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fbc\u002Fcf\u002F14\u002Fbccf14abdqnwotholdoyyhti01e.png","eventUrl":"https:\u002F\u002Fclck.ru\u002F35a2kx","geo":["Москва"],"isOnline":true,"descriptionHtml":"\u003Cp\u003E25-26 сентября пройдет главная конференция об&nbsp;облачных технологиях и&nbsp;бизнесе в&nbsp;России Yandex Scale. Вас ждут два дня докладов и&nbsp;обсуждений, 6&nbsp;тематических треков: Data Platform, ML, Serverless, Digital Workplace, Security, Infra + K8s и&nbsp;30&nbsp;крутых спикеров.\u003C\u002Fp\u003E\u003Cp\u003EВ&nbsp;первый день поговорим о&nbsp;новостях платформы и&nbsp;наших клиентов, во&nbsp;второй&nbsp;&mdash; вместе с&nbsp;партнерами представим крутые кейсы и&nbsp;расскажем обо всем, что нужно знать об&nbsp;облаках и&nbsp;облачных сервисах. Инструменты для работы с&nbsp;данными, речевая аналитика, машинное обучение в&nbsp;облаке, OpenSource, новости YandexGPT, кейсы от&nbsp;Skyeng, Whoosh, Азбуки вкуса и&nbsp;других крупных игроков&nbsp;&mdash; все это лишь малая часть насыщенной программы Yandex Scale.\u003C\u002Fp\u003E\u003Cp\u003EУчастие в&nbsp;конференции бесплатное. Для этого необходимо зарегистрироваться на&nbsp;сайте.\u003C\u002Fp\u003E"},{"id":"events_46","titleHtml":"Битва пет-проектов","startDay":"2023-09-25","finishDay":"2023-11-30","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fq4\u002Fbl\u002Ftl\u002Fq4bltl5nykwetj_aaaauhdaow6u.png","eventUrl":"https:\u002F\u002Fpet-project.habr.com\u002F?utm_source=special&utm_medium=calendar&utm_campaign=pet_project","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EСобрали две команды стажеров и&#160;джунов, которые будут работать над пет-проектами под кураторством опытных менторов. А&#160;определять победителей, которые получат стажировку в&#160;компании, будете&#160;вы.\u003C\u002Fp\u003E\u003Cp\u003EВнутри много движухи для зрителей: воркшопы по&#160;разработке, разборы резюме, публичные собеседования, Q&#38;A-сессии и&#160;даже чат, где можно найти себе команду и&#160;запилить какой-нибудь крутой пет-проект. \u003C\u002Fp\u003E\u003Cp xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EЕсть отличный бонус для начинающих: будем собирать стажировки и&#160;джуновские вакансии с&#160;рынка для еженедельной рассылки в&#160;рамках битвы. \u003C\u002Fp\u003E\u003Cp xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EРегистрируйтесь, чтобы ничего не&#160;пропустить!\u003C\u002Fp\u003E\u003Cbr \u002F\u003E"},{"id":"event_16","titleHtml":"Тестирование алгоритмов систем помощи водителю","startDay":"2023-09-28","finishDay":"2023-09-28","startTime":"10:00","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fdp\u002Frg\u002F0o\u002Fdprg0oqjoduu6x0s0skjszojzsy.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fexpcalendar","geo":["Москва"],"isOnline":false,"descriptionHtml":"\u003Cp\u003EНа&nbsp;семинаре будет показан подход к&nbsp;тестированию алгоритмов систем помощи водителю, позволяющий значительно сократить количество натурных испытаний за&nbsp;счет использования виртуального полигона.\u003C\u002Fp\u003E\u003Cp\u003EТестирование будет рассмотрено на&nbsp;примере системы удержания в&nbsp;полосе с&nbsp;функцией адаптивного круиз-контроля и&nbsp;будет включать в&nbsp;себя тестирование алгоритмов в&nbsp;реальном времени на&nbsp;комплексах полунатурного моделирования &laquo;РИТМ&raquo; с&nbsp;использованием CAN-интерфейсов.\u003C\u002Fp\u003E\u003Cp\u003EТакже мы&nbsp;продемонстрируем процесс создания математической модели динамики движения автомобиля и&nbsp;виртуального полигона, необходимых для тестирования разработанных алгоритмов.\u003C\u002Fp\u003E\u003Cp\u003EМероприятие призвано собрать на&nbsp;одной площадке всех специалистов данной тематики для обмена знаний и&nbsp;опыта, чтобы вооружившись последними технологиями дать толчок в&nbsp;развитии безопасности дорожного движения.\u003C\u002Fp\u003E"},{"id":"event_18","titleHtml":"Business&IT Day: Retail CPG","startDay":"2023-09-28","finishDay":"2023-09-28","startTime":"09:50","finishTime":"14:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fsi\u002Fu_\u002F80\u002Fsiu_80howp0giy-wsvmnrb1qrnw.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fbusinessitday","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EЕжегодная онлайн-конференция про организацию бизнес-процессов и&nbsp;использование информационных технологий в&nbsp;ритейле и&nbsp;ТНП.\u003C\u002Fp\u003E\u003Cp\u003EОбсудим IT&nbsp;в&nbsp;розничной торговле, федеральных и&nbsp;региональных розничных сетях, сетях аптек и&nbsp;на&nbsp;предприятиях, производящих товары народного потребления.\u003C\u002Fp\u003E"},{"id":"events_43","titleHtml":"ТЕХНОКРАТИЯ: Первая IT-конференция «без купюр»","startDay":"2023-09-28","finishDay":"2023-09-28","startTime":"10:30","finishTime":"20:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fx5\u002Fi3\u002Fto\u002Fx5i3tot8iivh5vpg-ia9e6qmmlu.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_thkrt","geo":["Москва"],"isOnline":false,"descriptionHtml":"\u003Cp\u003E28&nbsp;сентября АЭРОДИСК будет проводить оффлайн-конференцию для технических специалистов, которые непосредственно работают с&nbsp;российским оборудованием.\u003C\u002Fp\u003E\u003Cp\u003EБудет много практических докладов о&nbsp;том, как максимально эффективно использовать существующий функционал продуктов АЭРОДИСК, о&nbsp;том, как мы&nbsp;строим наши процессы разработки в&nbsp;привязке к&nbsp;запросам заказчиков. Также немного поговорим о&nbsp;будущем технологий в&nbsp;России, проведем практические воркшопы.\u003C\u002Fp\u003E\u003Cp\u003EКроме того, мы&nbsp;ожидаем гостей&nbsp;&mdash; других российских производителей&nbsp;&mdash; с&nbsp;их&nbsp;практическими докладами.\u003C\u002Fp\u003E"},{"id":"event_14","titleHtml":"XIX конференция разработчиков свободных программ «Базальт СПО»","startDay":"2023-09-29","finishDay":"2023-10-01","startTime":"10:00","finishTime":"19:00","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fyi\u002Fh2\u002Fmk\u002Fyih2mkst3jow_svnkemhq27h0o4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_bzlt","geo":["Переславль-Залесский"],"isOnline":true,"descriptionHtml":"\u003Cp\u003EЕжегодно конференция объединяет разработчиков свободных программ из&nbsp;России и&nbsp;других стран, чтобы обсудить новейшие достижения в&nbsp;области свободного&nbsp;ПО и&nbsp;перспективы его развития, наладить личные и&nbsp;профессиональные контакты, инициировать создание новых проектов сферы СПО.\u003C\u002Fp\u003E\u003Cp\u003EДля участия в&nbsp;конференции в&nbsp;качестве докладчика необходимо отправить заявку по&nbsp;адресу conference@lists.altlinux.org до&nbsp;1&nbsp;сентября 2023&nbsp;года.\u003C\u002Fp\u003E"},{"id":"event_29","titleHtml":"Kokoc Hackathon","startDay":"2023-09-29","finishDay":"2023-10-01","startTime":"19:00","finishTime":"21:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fuq\u002Frt\u002Frd\u002Fuqrtrd0fibci9i7phuuybk8drog.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_kks","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EС&nbsp;29&nbsp;сентября по&nbsp;1&nbsp;октября участвуйте в&nbsp;хакатоне Kokoc Hackathon 2023&nbsp;с призовым фондом 1&nbsp;000&nbsp;000&nbsp;рублей. \nНа&nbsp;хакатон приглашаются фронтенд-, бэкенд-, мобильные разработчики, аналитики, графические и&nbsp;UX\u002FUI-дизайнеры, продакт-менеджеры, маркетологи. Участвовать можно индивидуально или в&nbsp;команде до&nbsp;5&nbsp;человек.\u003C\u002Fp\u003E\u003Cp\u003EТреки хакатона:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003EРазработка решения для определения тематики веб-ресурса\u003C\u002Fli\u003E\u003Cli\u003EСоздание корпоративного веб-приложения, которое конвертирует физическую активность в&nbsp;благотворительные пожертвования\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EТаймлайн Kokoc Hackathon 2023:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EДо&nbsp;27&nbsp;сентября открыта регистрация на&nbsp;хакатон;\u003C\u002Fli\u003E\u003Cli\u003EС&nbsp;29&nbsp;сентября по&nbsp;1&nbsp;октября пройдёт основной этап хакатона: создание решений, чекпоинты с&nbsp;экспертами;\u003C\u002Fli\u003E\u003Cli\u003E1&nbsp;октября&nbsp;&mdash; финальный день хакатона и&nbsp;награждение победителей.\u003C\u002Fli\u003E\u003C\u002Ful\u003E"},{"id":"events_42","titleHtml":"Ruby Russia 2023 Online","startDay":"2023-09-30","finishDay":"2023-09-30","startTime":"11:00","finishTime":"21:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fts\u002F0o\u002Foj\u002Fts0oojrjposx193k5kf9y4vh5qu.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_rbrs","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EОдин день, 14&nbsp;новейших докладов, доклады в&nbsp;высоком качестве&nbsp;&mdash; всё это RubyRussia&rsquo;23. В&nbsp;конце сентября мы&nbsp;соберём рубистов со&nbsp;всей России и&nbsp;ближнего зарубежья, чтобы с&nbsp;ведущими разработчиками обсудить будущее нашего любимого языка и&nbsp;всего, что построено вокруг него.\u003C\u002Fp\u003E"},{"id":"event_21","titleHtml":"Видео+Конференция-2023 — главное событие о технологиях ВКС и совместной работе","startDay":"2023-10-05","finishDay":"2023-10-05","startTime":"10:00","finishTime":"19:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fcc\u002Fh9\u002F2p\u002Fcch92p_kfj0mbxeokbdgp-uopbw.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_vcs","geo":["Москва"],"isOnline":false,"descriptionHtml":"\u003Cp\u003EПриглашаем 5&nbsp;октября в&nbsp;Soluxe Hotel Moscow на&nbsp;главное отечественное мероприятие о&nbsp;технологиях видеоконференцсвязи, корпоративном общении и&nbsp;совместной работе. &laquo;Видео+Конференция&raquo; берёт своё начало в&nbsp;2011-ом году. Каждый год мероприятие объединяет более 500&nbsp;участников: ИТ-руководителей и&nbsp;профессионалов, отвечающих за&nbsp;цифровизацию коммуникаций и&nbsp;совместной работы, внедрение и&nbsp;эксплуатацию систем ВКС, мессенджеров и&nbsp;других ИТ-решений в&nbsp;российских частных и&nbsp;государственных компаниях.\u003Cbr\u003E&laquo;В+К-2023&raquo;&nbsp;&mdash; это:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Eвсё о российских технологиях для замены иностранных сервисов ВКС и мессенджеров\u003C\u002Fli\u003E\u003Cli\u003Eвыступления лидеров мнений отечественной ИТ-сферы\u003C\u002Fli\u003E\u003Cli\u003Eоткрытый диалог с разработчиками коммуникационного ПО\u003C\u002Fli\u003E\u003Cli\u003Eбольшая демозона с новыми решениями для совместной работы, устройствами для рабочих мест и автоматизации переговорных комнат\u003C\u002Fli\u003E\u003Cli\u003Eтехнологическая интеграция между популярными ИТ-решениями\u003C\u002Fli\u003E\u003Cli\u003Eнетворкинг\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПрограмма формируется.\u003Cbr\u003EУчастие бесплатное, онлайн-регистрация обязательна, количество мест ограничено.\u003C\u002Fp\u003E"},{"id":"events_37","titleHtml":"PG Boot Camp Russia 2023","startDay":"2023-10-05","finishDay":"2023-10-05","startTime":"10:00","finishTime":"17:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Ft_\u002Faf\u002Fcx\u002Ft_afcxlpq7bfbhcuziffrlpoddw.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002FytN90","geo":["Москва"],"isOnline":true,"descriptionHtml":"\u003Cp\u003EPG&nbsp;Boot Camp Russia 2023&nbsp;&mdash; мероприятие, направленное на&nbsp;приобретение практических навыков при работе с&nbsp;СУБД PostgreSQL. Программа рассчитана как на&nbsp;начинающих специалистов, так и&nbsp;на&nbsp;опытных разработчиков, желающих углубить свои знания ядра и&nbsp;экосистемы PostgreSQL и&nbsp;применить их&nbsp;на&nbsp;практике.\u003C\u002Fp\u003E\u003Cp\u003EПлощадка позволит участникам получить актуальную информацию по&nbsp;внедрению СУБД PostgreSQL в&nbsp;ИТ-инфраструктуру организаций и&nbsp;эффективному ее&nbsp;использованию, а&nbsp;также принять участие в&nbsp;практических мастер-классах от&nbsp;ведущих экспертов в&nbsp;своей области.\u003C\u002Fp\u003E"},{"id":"events_44","titleHtml":"Хабрасеминар «Как построить IT-бренд на Хабре»","startDay":"2023-10-06","finishDay":"2023-10-06","startTime":"11:00","finishTime":"15:00","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fxz\u002Fld\u002F4_\u002Fxzld4_xafntu0fwkzn66itfxrl8.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_hbrsm6","geo":["Москва"],"isOnline":false,"descriptionHtml":"\u003Cp\u003EСильный IT-бренд&nbsp;&mdash; один из&nbsp;важных драйверов развития любой компании. Его построение&nbsp;&mdash; многоплановый процесс, составной частью которого является прямая коммуникация с&nbsp;IT-сообществом. Но&nbsp;как выстроить такую коммуникацию и&nbsp;как сделать ее&nbsp;эффективной? В&nbsp;этом может помочь Хабр.\u003C\u002Fp\u003E\u003Cp\u003E6&nbsp;октября мы&nbsp;выходим в&nbsp;офлайн, чтобы обсудить практики работы с&nbsp;IT-брендом. На&nbsp;хабрасеминаре, который пройдёт в&nbsp;Gray Green Event Space по&nbsp;адресу: 3-й Красносельский пер., 19, стр&nbsp;13, мы&nbsp;с&nbsp;экспертами компаний разберём, что даёт сильный IT-бренд и&nbsp;как его можно развивать на&nbsp;Хабре.\u003C\u002Fp\u003E\u003Cp\u003EВ&nbsp;программе мероприятия: \u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EАндрей Шершов (РСХБ)&nbsp;&mdash; об&nbsp;опыте ведения блога на&nbsp;Хабре\u003C\u002Fli\u003E\u003Cli\u003EАлександр Рындин (Хабр)&nbsp;&mdash; о&nbsp;новых услугах Хабра для решения бизнес-задач компаний\u003C\u002Fli\u003E\u003Cli\u003EКруглый стол: &laquo;Как построить сильный IT-бренд и&nbsp;при чем тут Хабр&raquo;\u003C\u002Fli\u003E\u003C\u002Ful\u003E"},{"id":"events_45","titleHtml":"Joker","startDay":"2023-10-09","finishDay":"2023-10-14","startTime":"16:00","finishTime":"19:30","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fxo\u002Fvw\u002Fd6\u002Fxovwd6picvqcupuizlayrlxiqcq.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_jkr","geo":["Санкт-Петербург"],"isOnline":true,"descriptionHtml":"\u003Cp\u003EБольшая Java-конференция. 9&#8211;10 октября&#160;&#8212; онлайн часть, 13&#8211;14 октября&#160;&#8212; часть в&#160;Санкт-Петербурге с&#160;возможностью удалённого подключения.\u003C\u002Fp\u003E\u003Cp\u003EВ&#160;программе, как обычно, полезная Java-разработчикам техническая конкретика: инструменты, фреймворки, JVM, языковые нововведения и&#160;не&#160;только.\u003C\u002Fp\u003E\u003Cbr \u002F\u003E"},{"id":"events_41","titleHtml":"Deep cloud dive. Первая дискуссионная конференция beeline cloud","startDay":"2023-10-12","finishDay":"2023-10-12","startTime":"11:00","finishTime":"14:10","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fsk\u002Fem\u002Fiu\u002Fskemiuqjpev6azkn-imzs2lxasi.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_blndcd","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EНа&nbsp;одной площадке встретятся эксперты ведущих компаний рынка, чтобы обсудить тренды, затронуть наболевшие проблемы и&nbsp;наметить пути их&nbsp;решения.\u003C\u002Fp\u003E\u003Cp\u003EТри дискуссионных блока:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003ECloud. Локализация рынка облаков, проблематика отечественных продуктов&nbsp;&mdash; что нас ждет дальше?\u003C\u002Fli\u003E\u003Cli\u003EData. Демократизация ИИ&nbsp;и&nbsp;больших данных: примеры внедрений, перспективы развития\u003C\u002Fli\u003E\u003Cli\u003ESecurity. Кибербезопасность: актуальные угрозы, прогнозы и&nbsp;ожидания на&nbsp;2024 год\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПрограмма мероприятия:\u003Cbr\u003E11:00&nbsp;&mdash; 11:10 Открытие конференции\u003Cbr\u003E11:10&nbsp;&mdash; 12:00 Локализация в&nbsp;сфере Cloud: миграция в&nbsp;российское облако\u003Cbr\u003E12:50&nbsp;&mdash; 13:20 Большие данные и&nbsp;искусственный интеллект: перспективы развития\u003Cbr\u003E13:20&nbsp;&mdash; 14:10&nbsp;Кибербезопасность, ИТ-аутсорсинг: что нас ждет в&nbsp;2024 году\u003C\u002Fp\u003E\u003Cp\u003EДля кого:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003ECTO и&nbsp;руководители бизнеса\u003C\u002Fli\u003E\u003Cli\u003EИТ- и&nbsp;ИБ-директора, топ-менеджеры\u003C\u002Fli\u003E\u003Cli\u003EАрхитекторы, профильные ИТ-специалисты\u003C\u002Fli\u003E\u003Cli\u003EАналитики данных, дата-инженеры\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНе&nbsp;пропустите интерактивный диалог о&nbsp;рынке ИТ. Мероприятие бесплатное.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь и&nbsp;мы&nbsp;пришлем вам ссылку на&nbsp;онлайн-трансляцию.\u003C\u002Fp\u003E"},{"id":"event_34","titleHtml":"Курс «Архитектура программного обеспечения» от Яндекс Практикума","startDay":"2023-10-16","finishDay":"2023-10-16","startTime":"09:00","finishTime":"23:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fjw\u002Fiy\u002Fj2\u002Fjwiyj2kplvp4rn8uiog74md1xes.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_yprarch","geo":[],"isOnline":true,"descriptionHtml":"\u003Cp\u003EКурс для опытных разработчиков уровня Middle и&nbsp;Senior, которые хотят научиться создавать с&nbsp;нуля архитектуру сервисов и&nbsp;приложений. Вас ждет много практических заданий, прокачка насмотренности в&nbsp;области архитектуры&nbsp;ПО и&nbsp;экспертиза от&nbsp;техлидов Яндекса и&nbsp;других технологических компаний.\u003C\u002Fp\u003E\u003Cp\u003EЧему вы научитесь:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Eопределять, какую архитектуру приложения применять&nbsp;&mdash; монолитную или микросервисную;\u003C\u002Fli\u003E\u003Cli\u003Eвыбирать тип хранения данных, формат и&nbsp;протокол обмена данными&nbsp;&mdash; в&nbsp;зависимости от&nbsp;типа вашего приложения;\u003C\u002Fli\u003E\u003Cli\u003Eразбираться в&nbsp;вертикальном и&nbsp;горизонтальном масштабировании, балансировке нагрузки и&nbsp;стратегиях кеширования.\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EГлавное про курс:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Eвозможность повысить свой грейд, а&nbsp;соответственно&nbsp;&mdash; ценность на&nbsp;рынке;\u003C\u002Fli\u003E\u003Cli\u003E+5&nbsp;новых архитектур в&nbsp;портфолио;\u003C\u002Fli\u003E\u003Cli\u003Eнаставничество и&nbsp;код-ревью от&nbsp;экспертов с&nbsp;большим опытом проектирования архитектуры;\u003C\u002Fli\u003E\u003Cli\u003Eпрограмма длительностью 6&nbsp;месяцев: учёбе нужно уделять от&nbsp;15&nbsp;часов в&nbsp;неделю;\u003C\u002Fli\u003E\u003Cli\u003Eподойдёт для разработчиков с&nbsp;опытом коммерческой бэкенд-разработки от&nbsp;2&nbsp;лет.\u003C\u002Fli\u003E\u003C\u002Ful\u003E"},{"id":"event_31","titleHtml":"Russia Risk Conference 2023 — 19-я конференция по риск-менеджменту","startDay":"2023-10-25","finishDay":"2023-10-26","startTime":"10:00","finishTime":"19:00","imageUrl":"https:\u002F\u002Fhsto.org\u002Fwebt\u002Fhz\u002Ftg\u002F9k\u002Fhztg9k1w_eanhcx-7f184wdouri.jpeg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_rskcnf","geo":["Москва"],"isOnline":true,"descriptionHtml":"\u003Cp\u003E25&ndash;26 октября состоится Russia Risk Conference 2023&nbsp;&mdash; ключевая конференция по&nbsp;управлению рисками в&nbsp;финансовой сфере.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма конференции включает темы:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EТехнологии искусственного интеллекта в&nbsp;управлении рисками: LLM, применение&nbsp;ML, управление модельным риском, Reject Inference, Muti-head graph attention-сети, Reinforcement Learning\u003C\u002Fli\u003E\u003Cli\u003EОбсуждение макроэкономических трендов, кредитно-денежной и&nbsp;регуляторной политики. Прогнозирование тенденций риска\u003C\u002Fli\u003E\u003Cli\u003EКредитные риски: тенденции в&nbsp;управлении кредитными рисками в&nbsp;новых условиях. Моделирование отклика клиента на&nbsp;действия кредитора. Оптимизация стратегий кредитования\u003C\u002Fli\u003E\u003Cli\u003EКомплексное управление рисками. Блиц-интервью с&nbsp;директорами по&nbsp;рискам страховых, лизинговых, микрофинансовых и&nbsp;других компаний&nbsp;&mdash; представителей финансового сектора\u003C\u002Fli\u003E\u003Cli\u003EОперационные риски и&nbsp;кибербезопасность\u003C\u002Fli\u003E\u003Cli\u003EЦифровые финансовые активы (ЦФА): риски и&nbsp;возможности цифрового рубля\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EДля кого: CRO, топ-менеджеров, курирующих управление рисками, специалистов по&nbsp;мониторингу и&nbsp;валидации рисков, риск-менеджеров и&nbsp;риск-аналитиков, data scientists, экспертов-практиков в&nbsp;области управления кредитными, рыночными и&nbsp;операционными рисками, специалистов управлений количественного анализа и&nbsp;моделирования рисков.\u003C\u002Fp\u003E"}]}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script>
<script src="https://assets.habr.com/habr-web/js/chunk-vendors.f2cd882e.js" defer></script><script src="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.4441b282.js" defer></script>



    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(24049213, "init", {
      defer:true,
      trackLinks:true,
      accurateTrackBounce:true,
      webvisor:false,
    });
  </script>
  <noscript>
    <div>
      <img src="https://mc.yandex.ru/watch/24049213" style="position:absolute; left:-9999px;" alt="" />
    </div>
  </noscript>
  
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
<script src="/js/ads.js" onload="window['zhY4i4nJ9K'] = true"></script>
</body>
</html>
